<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ricardo's Dev Blog Blog</title>
        <link>https://ricardo-schnur.github.io/</link>
        <description>Ricardo's Dev Blog Blog</description>
        <lastBuildDate>Tue, 16 Apr 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>de</language>
        <item>
            <title><![CDATA[Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt – Teil 5: Anbindung der Datenbank (am Beispiel einer MongoDB)]]></title>
            <link>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5</link>
            <guid>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5</guid>
            <pubDate>Tue, 16 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[banner]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="banner" src="https://ricardo-schnur.github.io/assets/images/banner-44dc1d30b8a1b9335d5b0d5a251323ee.webp" width="1031" height="592" class="img_ev3q"></p>
<blockquote>
<p>In seiner fünfteiligen Blogreihe erklärt Ricardo die Vorteile von hexagonaler Architektur am Beispiel der Entwicklung
einer To-Do-Listen-Anwendung. Im letzten Teil der Reihe wird das Projekt mit der Anbindung einer MongoDB
abgeschlossen, was – dank der gewählten Architektur – mit minimalem Aufwand möglich wird.</p>
</blockquote>
<!-- -->
<!-- -->
<p>Nachdem wir im Laufe dieser Serie eine voll funktionsfähige <strong>To-Do-Listen-Anwendung</strong> entwickelt haben (den kompletten
Code findet ihr auf <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post5" target="_blank" rel="noopener noreferrer">GitHub</a>),
wollen wir uns zum Abschluss noch anschauen, wie die gewählte Architektur es uns ermöglicht, ganz ohne Änderungen am
Applikationskern und mit minimalem Aufwand <strong>unseren In-Memory Cache durch eine persistente MongoDB zu ersetzen</strong>.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1" target="_blank" rel="noopener noreferrer">Im ersten Teil</a> dieser Serie haben wir
ein <strong>frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert</strong>. Wir haben uns überlegt, wie wir uns die *
<em>Architektur
der Anwendung und ihre Umsetzung</em>* vorstellen und diese Vorstellung mittels ArchUnit in einem <strong>automatisierten
Architekturtest</strong> festgehalten.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2" target="_blank" rel="noopener noreferrer">Im zweiten Teil</a> sind wir mit der
<strong>Modellierung der Domäne</strong>, der <strong>Implementierung der Kernlogik</strong> und der Datenhaltung der Anwendung in die eigentliche
Entwicklung gestartet.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3" target="_blank" rel="noopener noreferrer">Im dritten Teil</a> haben wir alle
grundlegenden <strong>Funktionalitäten unserer Anwendung implementiert</strong>, sodass diese nutzbar wurde.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4" target="_blank" rel="noopener noreferrer">Im vierten Teil</a> haben wir uns
angesehen, welche Auswirkungen eine <strong>Anpassung am Domänenmodell</strong> auf die bestehende Anwendung hat. Außerdem wurde die
<strong>Applikationsschicht</strong> mit einer geplanten Aufgabe zum regelmäßigen Senden von Benachrichtigungen gefüllt sowie mit der
Möglichkeit, beim Anwendungsstart automatisch einige Beispieltasks zu erzeugen.</p>
<p>Nun geht es also noch darum, den In-Memory-Cache abzulösen durch eine persistente MongoDB – was dank unserer Architektur
mit minimalem Aufwand möglich wird.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup-der-mongodb">Setup der MongoDB<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5#setup-der-mongodb" class="hash-link" aria-label="Direkter Link zur Setup der MongoDB" title="Direkter Link zur Setup der MongoDB">​</a></h2>
<p>Solltet ihr bereits eine MongoDB-Instanz zur Verfügung haben, könnt ihr diesen Schritt natürlich überspringen. Ansonsten
stellt folgende Docker Compose Datei eine minimal lauffähige Konfiguration bereit, die für unsere Zwecke völlig
ausreicht:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token comment" style="color:#999999"># See https://hub.docker.com/_/mongo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key atrule" style="color:#FAC863">services</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token key atrule" style="color:#FAC863">mongo</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token key atrule" style="color:#FAC863">image</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"mongo:6.0.7"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token key atrule" style="color:#FAC863">restart</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"unless-stopped"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token key atrule" style="color:#FAC863">ports</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">      </span><span class="token punctuation" style="color:#8dc891">-</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"27017:27017"</span><span class="token plain"> </span><span class="token comment" style="color:#999999"># Map the port to make it accessible outside the container</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token key atrule" style="color:#FAC863">environment</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">      </span><span class="token key atrule" style="color:#FAC863">MONGO_INITDB_ROOT_USERNAME</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"root"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">      </span><span class="token key atrule" style="color:#FAC863">MONGO_INITDB_ROOT_PASSWORD</span><span class="token punctuation" style="color:#8dc891">:</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"example"</span><span class="token plain"> </span><span class="token comment" style="color:#999999"># Use secrets in a production application instead of plaintext passwords!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ihr benötigt hierzu Docker mit installiertem Compose-Plugin und könnt die Datenbankinstanz dann mit dem Befehl</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token function" style="color:#79b6f2">docker-compose</span><span class="token plain"> </span><span class="token parameter variable" style="color:#d7deea">-f</span><span class="token plain"> mongodb-compose.yaml up</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>aufsetzen. Die Instanz ist dann auf Port <code>27017</code> mit den Zugangsdaten <code>root / example</code> ansprechbar. Diese Konfiguration
könnt ihr natürlich nach Belieben in der obigen Compose Datei anpassen.</p>
<p>Nachdem wir nun eine Datenbank zur Verfügung haben, wollen wir unsere Anwendung im nächsten Schritt mit dieser
verbinden.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="anbindung-der-anwendung-an-die-datenbank">Anbindung der Anwendung an die Datenbank<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5#anbindung-der-anwendung-an-die-datenbank" class="hash-link" aria-label="Direkter Link zur Anbindung der Anwendung an die Datenbank" title="Direkter Link zur Anbindung der Anwendung an die Datenbank">​</a></h2>
<p>In einem ersten Schritt hinterlegen wir dazu die Verbindungsdaten in den <code>application.properties</code>:</p>
<div class="language-properties codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-properties codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token comment" style="color:#999999"># MongoDB config</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.host</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">localhost</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.port</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">27017</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.authentication-database</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">admin</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.database</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.username</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">root</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">spring.data.mongodb.password</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">example</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In einer produktiven Anwendung sollte das Passwort natürlich in einem <em>Secret Manager</em> hinterlegt werden,
diesen Umweg sparen wir uns aber an dieser Stelle.</p>
<p>Als Nächstes fügen wir die Abhängigkeit <em>spring-boot-starter-data-mongodb</em> zu unserem Projekt in der <code>pom.xml</code> hinzu:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token tag punctuation" style="color:#8dc891">&lt;</span><span class="token tag" style="color:#fc929e">dependency</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token tag punctuation" style="color:#8dc891">&lt;</span><span class="token tag" style="color:#fc929e">groupId</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><span class="token plain">org.springframework.boot</span><span class="token tag punctuation" style="color:#8dc891">&lt;/</span><span class="token tag" style="color:#fc929e">groupId</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token tag punctuation" style="color:#8dc891">&lt;</span><span class="token tag" style="color:#fc929e">artifactId</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><span class="token plain">spring-boot-starter-data-mongodb</span><span class="token tag punctuation" style="color:#8dc891">&lt;/</span><span class="token tag" style="color:#fc929e">artifactId</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token tag punctuation" style="color:#8dc891">&lt;/</span><span class="token tag" style="color:#fc929e">dependency</span><span class="token tag punctuation" style="color:#8dc891">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Diese kann, ohne weitere Zuarbeit unsererseits, mithilfe der eben hinterlegten Optionen nun eine Verbindung zur
Datenbank herstellen.</p>
<p>Schließlich fehlt uns noch eine Möglichkeit, zu entscheiden, ob wir wie bisher mit einem Cache oder mit der neuen
Datenbank arbeiten möchten. Dazu führen wir zuerst einen weiteren Konfigurationsparameter</p>
<div class="language-properties codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-properties codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token comment" style="color:#999999"># Use 'cache' or 'database'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token key attr-name" style="color:#c5a5c5">storage.type</span><span class="token punctuation" style="color:#8dc891">=</span><span class="token value attr-value" style="color:#8dc891">cache</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ein und müssen zum Abschluss noch - basierend auf dem gesetzen Wert dieses Parameters - unsere Anwendung
entweder mit dem schon existierenden Cache-Adapter oder mit einem hypothetischen Datenbank-Adapter laden.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bedingtes-laden-von-komponenten">Bedingtes Laden von Komponenten<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5#bedingtes-laden-von-komponenten" class="hash-link" aria-label="Direkter Link zur Bedingtes Laden von Komponenten" title="Direkter Link zur Bedingtes Laden von Komponenten">​</a></h2>
<p>Um dies zu ermöglichen, werden wir nun Teile unserer Anwendung nur noch bedingt beim Anwendungsstart laden.
Hierzu führen wir mehrere Anpassungen an unserer Einstiegsklasse <code>HexagonalToDoListApplication</code> durch.</p>
<p>Zuerst einmal schließen wir sowohl den Cache-Adapter, als auch den noch zu implementierenden Datenbank-Adapter,
komplett vom Anwendungsstart aus. Dazu hinterlegen wir folgende <code>@ComponentScan</code>-Konfiguration an der Klasse:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@ComponentScan</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        excludeFilters </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token annotation punctuation" style="color:#8dc891">@ComponentScan.Filter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">type </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">FilterType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">REGEX</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> pattern </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">ADAPTER_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">".cache.*"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token annotation punctuation" style="color:#8dc891">@ComponentScan.Filter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">type </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">FilterType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">REGEX</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> pattern </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">ADAPTER_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">".mongodb.*"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Hierbei verwenden wir die Konstante <code>String ADAPTER_PACKAGE = "de.colenet.hexagonal.todo.list.adapter"</code>.</p>
<p>Um unsere Anwendung wie bisher mit einem Cache starten zu können, legen wir eine neue, innere,
mit <code>@Configuration</code>-annotierte Klasse an, die einerseits den eben ausgeschlossenen Cache-Adapter wieder lädt,
falls <code>storage.type="cache"</code> gesetzt ist, und andererseits noch die <em>AutoConfiguration</em> der eben hinzugefügten
Abhängigkeit unterdrückt. Letzteres schließen wir an dieser Stelle statt in der Einstiegsklasse aus, da
ansonsten (aufgrund der Art und Weise, wie <em>AutoConfiguration</em> in Spring funktioniert) erheblich mehr
Konfigurationsarbeit von uns zu leisten wäre. Die entstandene Konfiguration sieht folgendermaßen aus:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@ComponentScan</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">ADAPTER_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">".cache"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@ConditionalOnProperty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">name </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"storage.type"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> havingValue </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"cache"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@EnableAutoConfiguration</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        exclude </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token class-name" style="color:#FAC863">MongoAutoConfiguration</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoDataAutoConfiguration</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoRepositoriesAutoConfiguration</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CacheConfiguration</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Für die Datenbank gehen wir analog vor, nur dass wir hier keine Anpassung an der <em>AutoConfiguration</em> benötigen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@ComponentScan</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">ADAPTER_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">".mongodb"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@ConditionalOnProperty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">name </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"storage.type"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> havingValue </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"database"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DatabaseConfiguration</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Starten wir nun unsere Anwendung mit der Konfiguration <code>storage.type="cache"</code>, so verhält sich alles wie bisher.
Versuchen wir hingegen mit <code>storage.type="database"</code> zu starten, wird dies derzeit noch nicht funktionieren, da
keine Implementierung für <code>TaskRepository</code> unter den geladenen Komponenten zu finden ist.
Das beheben wir natürlich, indem wir im Folgenden abschließend unseren Datenbank-Adapter implementieren.</p>
<p>Bemerkenswert ist an dieser Stelle, dass wir hiermit bereits jegliche Konfigurationsarbeit geleistet haben und
auch keinerlei weitere Änderungen in unserem Bestandscode notwendig sind; wir werden im Folgenden (abgesehen von
Tests) ausschließlich in einem neuen Adapter arbeiten. Dieser Umstand demonstriert deutlich einen der großen
Vorteile der hexagonalen Architektur: Infrastrukturänderungen haben nur sehr lokale Auswirkungen. Wir mussten nicht
eine einzige Zeile Code in unserem Applikationskern oder in anderen Adaptern anpassen!</p>
<p>Kommen wir nun also endlich zum letzten Puzzleteil: Dem Datenbank-Adapter.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-des-datenbank-adapters">Implementation des Datenbank-Adapters<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5#implementation-des-datenbank-adapters" class="hash-link" aria-label="Direkter Link zur Implementation des Datenbank-Adapters" title="Direkter Link zur Implementation des Datenbank-Adapters">​</a></h2>
<p>Hier passiert überhaupt nichts Neues mehr. Wir haben in den vorherigen Adaptern alle Techniken kennengelernt und
gehen hier völlig analog vor.</p>
<p>Zuerst legen wir uns eine geeignete Darstellung unseres Datenmodells für den gegebenen Zweck zurecht.
Wie im REST-Adapter auch, greifen wir hier auf eine Darstellung als reinen Produkttyp zurück, sind aber in unseren
Zeittypen konkreter als dort, da diese hier entsprechend unterstützt werden:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">boolean</span><span class="token plain"> completed</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token plain"> completionTime</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Natürlich brauchen wir an dieser Stelle dann auch wieder einen geeigneten <em>Mapper</em>, um zwischen dieser Darstellung
und unserem Domänenmodell hin- und herwechseln zu können:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoMapper</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toEntity</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">orElse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token boolean" style="color:#ff8b50">false</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token boolean" style="color:#ff8b50">true</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toModel</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token plain"> entity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completed</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">?</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toCompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">:</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toOpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toCompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token plain"> entity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fromString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ofNullable</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toOpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskEntity</span><span class="token plain"> entity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fromString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ofNullable</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wir haben nun also drei verschiedene Ausprägungen eines <em>Task</em>s. Einerseits unser rein durch die Fachlichkeit
motiviertes Domänenmodell <code>Task</code>, andererseits zwei zweckgebundene, durch die gewählte Infrastruktur beeinflusste,
Ausprägungen <code>TaskDto</code> und <code>TaskEntity</code>. Diese können wir nach Bedarf völlig unabhängig voneinander evolvieren
(durch geeignete Anpassung an den entsprechenden <em>Mappern</em>) und sind so etwa gerade dazu in der Lage, unsere
Persistenzinfrastruktur grundlegend zu verändern, ohne die öffentliche API der Anwendung zu verändern.</p>
<p>Als letzter Schritt bleibt jetzt also nur die Implementierung von <code>TaskRepository</code>. Hierzu legen wir erst ein Spring
Data Repository</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Repository</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">interface</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">BaseMongoTaskRepository</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">extends</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoRepository</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskEntity</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskEntity</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">findByDueDateIsBeforeOrDueDateEquals</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> beforeDate</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> equalsDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">default</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskEntity</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">findByDueDateIsBeforeOrDueDateEquals</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> date</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">findByDueDateIsBeforeOrDueDateEquals</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">date</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> date</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>an, welches die eigentliche Arbeit verrichten wird. In unserer Implementierung von <code>TaskRepository</code> werden wir jetzt
nur noch Aufrufe dieses Repositories, sowie des zuvor angelegten Mappers, auf geeignete Art und Weise zusammenfügen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Repository</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoTaskRepository</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">BaseMongoTaskRepository</span><span class="token plain"> baseMongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoMapper</span><span class="token plain"> mongoMapper</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">MongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">BaseMongoTaskRepository</span><span class="token plain"> baseMongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MongoMapper</span><span class="token plain"> mongoMapper</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">baseMongoTaskRepository </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> baseMongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">mongoMapper </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> mongoMapper</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Function1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">mongoMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toEntity</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">andThen</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">baseMongoTaskRepository</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">andThen</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">mongoMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toModel</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">apply</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">find</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> baseMongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">findById</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">mongoMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toModel</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> baseMongoTaskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">findAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">stream</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">mongoMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toModel</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toList</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">OpenTask</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllOpenTasksWithDueDateBeforeOrEqual</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> date</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> baseMongoTaskRepository</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">findByDueDateIsBeforeOrDueDateEquals</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">date</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">stream</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">mongoMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toModel</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token comment" style="color:#999999">// Should probably be filtered in the database call in production applications!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">filter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">isInstance</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">cast</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toList</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Damit haben wir unsere Implementierung endlich abgeschlossen und können unsere Anwendung schließlich mit der
Konfiguration <code>storage.type="database"</code> starten und unsere Tasks persistent in der anfangs angelegten Datenbank
speichern.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Randbemerkung: Testing</div><div class="admonitionContent_BuS1"><p>Um sicherzustellen, dass unser neuer Datenbank-Adapter nichts am Verhalten der Anwendung ändert, habe ich die bereits
existierenden Integrations- und End-To-End-Tests so abstrahiert, dass sie sowohl gegen den Cache- als auch gegen den
Datenbank-Adapter gefahren werden können. Das liefert uns zumindest eine gewisse Konfidenz, dass sich die beiden
Persistenz-Modi in ihrem Verhalten nach außen nicht unterscheiden.</p><p>Auch wenn Testing nicht im Fokus dieser Reihe lag,
lade ich euch dazu ein, euch die Details hierzu
im <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post5" target="_blank" rel="noopener noreferrer">Repository</a> anzuschauen.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="die-vorteile-hexagonaler-architektur-nutzen">Die Vorteile hexagonaler Architektur nutzen<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-5#die-vorteile-hexagonaler-architektur-nutzen" class="hash-link" aria-label="Direkter Link zur Die Vorteile hexagonaler Architektur nutzen" title="Direkter Link zur Die Vorteile hexagonaler Architektur nutzen">​</a></h2>
<p>Hiermit sind wir am Ende unserer Reise angelangt. Zu Beginn des ersten Teils habe ich der hexagonalen Architektur
Vorteile wie etwa ein <strong>domänenzentriertes Design</strong>, <strong>Flexibilität</strong> und eine <strong>klare Projektstruktur</strong> zugeschrieben.
In diesem
Teil konnten wir außerdem sehen, <strong>dass das Infrastrukturthema <em>Cache oder Datenbank</em> zur Datenhaltung keine einzige
Zeile
an Codeänderungen in der Domänenschicht erforderte</strong>. Hätten wir unsere Anforderung leicht abgeändert zu <em>Cache durch
Datenbank ersetzen</em>, wären noch nicht einmal die Änderungen zum bedingten Laden von Komponenten notwendig gewesen
und wir
hätten einzig den Cacheadapter durch einen Datenbankadapter ersetzen müssen.</p>
<p>Ihr habt in dieser Reihe einen von vielen möglichen Wegen gesehen, wie sich eine <strong>hexagonale Architektur in Java mit
Spring</strong> umsetzen lässt. Die gelernte Vorgehensweise lässt sich aber natürlich konzeptuell auch auf andere Sprachen und
Frameworks – mit entsprechenden technischen Anpassungen – übertragen.</p>
<p>Probiert es in eurem nächsten Projekt doch mal aus!</p>]]></content:encoded>
            <category>Domain-driven Design</category>
            <category>Hexagonale Architektur</category>
            <category>Softwarearchitektur</category>
            <category>Softwareentwicklung</category>
        </item>
        <item>
            <title><![CDATA[Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt – Teil 4: Folgen einer Änderung am Domänenmodell und die Applikationsschicht]]></title>
            <link>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4</link>
            <guid>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4</guid>
            <pubDate>Tue, 27 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[banner]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="banner" src="https://ricardo-schnur.github.io/assets/images/banner-f45034d23a133067a27eca2af8ac1a1f.webp" width="1031" height="592" class="img_ev3q"></p>
<blockquote>
<p>Ricardo zeigt uns in dieser Blog-Reihe die Vorteile von hexagonaler Architektur anhand der Entwicklung einer
To-Do-Listen-Anwendung. Im 4. Teil wird das Domänenmodell erweitert und die Applikationsschicht mit einer
geplanten Aufgabe gefüllt.</p>
</blockquote>
<!-- -->
<!-- -->
<p>Diese Artikel-Reihe ist der hexagonalen Architektur gewidmet: Wir möchten ihre Grundprinzipien verstehen und diese in
der Praxis erleben. Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung
praktisch realisieren lässt. Dazu werden wir Schritt für Schritt eine kleine <strong>To-do-Listen-Anwendung</strong> entwickeln, die
es
ermöglichen soll, Tasks anzulegen, angelegte Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird
über eine REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar entweder In-Memory oder persistent in
einer echten MongoDB verwaltet.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1" target="_blank" rel="noopener noreferrer">Im ersten Teil</a> dieser Serie haben wir
ein frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert. Wir haben uns
überlegt, wie wir uns die Architektur der Anwendung und ihre Umsetzung vorstellen und diese Vorstellung mittels ArchUnit
in einem automatisierten Architekturtest festgehalten.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2" target="_blank" rel="noopener noreferrer">Im zweiten Teil</a> sind wir mit der
Modellierung der Domäne, der Implementierung der Kernlogik und der Datenhaltung der
Anwendung in die eigentliche Entwicklung gestartet.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3" target="_blank" rel="noopener noreferrer">Im dritten Teil</a> haben wir alle
grundlegenden Funktionalitäten unserer Anwendung implementiert, sodass diese bereits
nutzbar ist.</p>
<p>Nun möchten wir uns einerseits anschauen, welche Auswirkungen eine <strong>Anpassung am Domänenmodell</strong> auf die bestehende
Anwendung hat und außerdem die bis dato noch unbeachtete <strong>Applikationsschicht</strong> mit einer geplanten Aufgabe zum
regelmäßigen Senden von Benachrichtigungen füllen sowie der Möglichkeit, beim Anwendungsstart automatisch einige
Beispieltasks zu erzeugen.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Ihr findet den aktuellen Stand des Projekts sowie die Änderungen auch aus diesem Teil
auf <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post4" target="_blank" rel="noopener noreferrer">GitHub</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erweiterung-des-domänenmodells">Erweiterung des Domänenmodells<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4#erweiterung-des-dom%C3%A4nenmodells" class="hash-link" aria-label="Direkter Link zur Erweiterung des Domänenmodells" title="Direkter Link zur Erweiterung des Domänenmodells">​</a></h2>
<p>Unsere Anforderung soll recht simpel gehalten werden. Wir wollen unserem Task eine neue Eigenschaft
<em>Fälligkeitsdatum</em> hinzufügen. Hierbei soll es sich um eine optionale Eigenschaft handeln und sie soll sowohl bei
offenen als auch (zur Nachvollziehbarkeit) bei geschlossenen Tasks vorhanden sein.</p>
<p>In einem ersten Schritt wollen wir nur diese neue Eigenschaft hinzufügen und uns anschauen, an welchen Stellen
unserer Anwendung wir dazu alles Anpassungen vornehmen müssen. Im Anschluss daran werden wir unsere Anwendung dann um
automatische Fälligkeitsbenachrichtigungen erweitern.</p>
<p>Die Erweiterung unseres Modells gestaltet sich denkbar einfach - wir fügen lediglich die neue Eigenschaft in den
beiden <code>record</code>s <code>OpenTask</code> und <code>CompletedTask</code> hinzu. Außerdem nehmen wir sie in das Interface <code>Task</code> mit auf:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">sealed</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">interface</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token plain"> completionTime</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Jetzt können wir uns vom Typsystem und dem Compiler leiten lassen. Als Erstes fällt uns direkt auf, dass den
Konstruktoraufrufen in <code>TaskService</code> nun einen Parameter fehlt. Dies beheben wir, indem wir einerseits in
<code>withToggledCompletionState</code> den jeweils neuen Parameter mit übergeben</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">withToggledCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">now</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">clock</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>und andererseits in <code>createTask</code> die Methodensignatur um einen entsprechenden Parameter erweitern und diesen
weiterreichen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">randomUUID</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Durch diese Signaturänderung wird nun natürlich der Aufruf dieser Methode aus <code>RestApiController</code> heraus ungültig.</p>
<p>Um das zu beheben, müssen wir uns ein wenig mehr anstrengen. Wir erweitern auch hier wieder
die Signatur, um den neuen Parameter auch im REST-Aufruf mitgeben zu können:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token annotation punctuation" style="color:#8dc891">@RequestParam</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token annotation punctuation" style="color:#8dc891">@RequestParam</span><span class="token plain"> </span><span class="token annotation punctuation" style="color:#8dc891">@Nullable</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Auffällig ist hier der Typ <code>@Nullable String</code>. Diesen wählen wir, damit unser Endpunkt auch weiterhin ohne
diesen Parameter aufrufbar ist und wir Serialisierbarkeit gewährleisten. Im Gegensatz dazu haben wir uns im
Domänenmodell für den Typ <code>Optional&lt;LocalDate&gt;</code> entschieden, der einerseits mit <code>LocalDate</code> spezifischer als
<code>String</code> ist und andererseits die Optionalität der Eigenschaft durch <code>Optional</code> explizit macht und dadurch Benutzer
dazu zwingt, damit umzugehen. Als Nächstes erweitern wir unseren <code>RestApiValidator</code>. Hier wollen wir die bestehende
Methode</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateDescription</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ablösen durch:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Seq</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Tuple2</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateCreateTaskParameters</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> dueDate</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Diese soll uns also im Erfolgsfall ein Tupel bestehend aus der, wie bisher validierten <code>description</code>, aber erweitert
um ein validiertes und in den erwarteten Typ umgewandeltes <code>dueDate</code> zurückgeben. Im Fehlerfall wollen wir
außerdem <code>Seq&lt;String&gt;</code> statt nur <code>String</code> zurückgeben, um gegebenenfalls für beide Validierungen eine
Fehlernachricht bereitstellen zu können. Bei <code>Seq</code> (für <em>Sequence</em>) handelt es sich hierbei um einen von Vavr
bereitgestellten Typ.</p>
<p>Hierzu bauen wir uns erst eine dedizierte Validierungsfunktion für das <code>dueDate</code>,
die uns entweder ein leeres <code>Optional</code> oder aber das geparste Datum liefert:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateDueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token operator" style="color:#d7deea">!</span><span class="token class-name" style="color:#FAC863">StringUtils</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">hasText</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">valid</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">empty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Try</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">success</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">mapTry</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">parse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toValidation</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">__ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"Due date has to be in format yyyy-MM-dd: "</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Diese Methode kombinieren wir dann mit <code>validateDescription</code> zu:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Seq</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Tuple2</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">LocalDate</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateCreateTaskParameters</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> dueDate</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">combine</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token function" style="color:#79b6f2">validateDescription</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateDueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ap</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Tuple</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Schließlich passen wir noch den Aufruf in <code>RestApiController::createTask</code> an, indem wir die bestehende Implementierung</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restApiValidator</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">validateDescription</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fold</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ersetzen durch:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restApiValidator</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">validateCreateTaskParameters</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Function2</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">tupled</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">mapError</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">messages </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">join</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"; "</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> messages</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fold</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wir validieren also nun beide Parameter und reichen diese dann an den Service weiter. Im Fehlerfall konkatenieren
wir außerdem alle Nachrichten zu einer einzigen Nachricht, die wir dann in die Response aufnehmen.</p>
<p>Sofern wir auch unsere Testklassen entsprechend angepasst haben, ist unsere Anwendung nun wieder kompilierbar und
nutzbar. Auch ist es uns jetzt möglich, Tasks mit einem Fälligkeitsdatum via REST-Aufruf anzulegen. Auffällig ist aber,
dass alle Antworten unserer Endpunkte <em>kein</em> Fälligkeitsdatum mitliefern.</p>
<p>In erster Linie gilt hier aber völlig unironisch das Motto <em>It's not a bug, it's a feature.</em> Dieser Umstand zeigt
nämlich, dass wir <em>nicht</em> aus Versehen implizit unsere Schnittstelle verändert haben, sondern dies durch die
Entkopplung von <code>Task</code> zu <code>TaskDto</code> eine bewusste Entscheidung sein muss. Da wir besagte Änderung an dieser Stelle
aber natürlich gutheißen, fügen wir die neue Eigenschaft in einem letzten Schritt noch zu unserem Austauschmodell hinzu</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> dueDate</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> state</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> completionTime</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>und erweitern die Methode <code>RestApiMapper::toDto</code> um eine entsprechende Zeile:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain">model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">dueDate</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toString</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">orElse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Damit enthalten schließlich auch alle Antworten unserer Endpunkte die neue Eigenschaft. Im folgenden Abschnitt
wollen wir das neu hinzugefügte Fälligkeitsdatum nutzen, um automatisiert Fälligkeitsbenachrichtigungen zu versenden.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="die-applikationsschicht-automatische-fälligkeitsbenachrichtigungen">Die Applikationsschicht: Automatische Fälligkeitsbenachrichtigungen<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4#die-applikationsschicht-automatische-f%C3%A4lligkeitsbenachrichtigungen" class="hash-link" aria-label="Direkter Link zur Die Applikationsschicht: Automatische Fälligkeitsbenachrichtigungen" title="Direkter Link zur Die Applikationsschicht: Automatische Fälligkeitsbenachrichtigungen">​</a></h2>
<p>Auch hier wollen wir die Anforderungen zu Demonstrationszwecken möglichst simpel halten: Wir wollen in regelmäßigen
Abständen all unsere offenen Tasks anschauen, prüfen, ob das Fälligkeitsdatum überschritten ist, und in diesem Fall
eine Benachrichtigung senden. Dazu implementieren wir eine geplante Aufgabe mittels der von Spring
bereitgestellten <code>@Scheduled</code> Annotation und lassen diese in einem fixen Intervall laufen.</p>
<p>Solche geplanten Aufgaben sind ein typisches Beispiel für Code, den wir in der Applikationsschicht unterbringen.
Denn weder handelt es sich hierbei um Kernlogik, sodass die Domäne der falsche Ort dafür ist, noch haben wir hier
eine Anbindung an die Außenwelt, was für einen Adapter sprechen würde. Andere typische Themen, die in der
Applikationsschicht ihren Platz finden, sind etwa Transaktionsmanagement, die Zusammenführung mehrerer
Teile der Kernlogik zu einem Workflow oder einmalige Aufgaben, die beim Anwendungsstart erledigt werden müssen
(hierfür sehen wir später noch ein Beispiel).</p>
<p>Wir starten also mit einer neuen Klasse</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">application</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">scheduler</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationScheduler</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>in der wir eine Methode</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@Scheduled</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">fixedRateString </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"${notification.interval}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> timeUnit </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TimeUnit</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">SECONDS</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">sendDueNotifications</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>implementieren möchten. Das Benachrichtigungsintervall wollen wir hierbei
konfigurierbar halten und legen dafür den Parameter <code>notification.interval</code> in den <code>application.properties</code> an und
belegen diesen dort mit einem geeigneten Wert, etwa <code>notification.interval=60</code> für eine minütliche Benachrichtigung.</p>
<p>Außerdem müssen wir den Scheduling-Mechanismus von Spring überhaupt erst aktivieren, indem wir unsere
Einstiegsklasse mit <code>@EnableScheduling</code> annotieren:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@SpringBootApplication</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@EnableScheduling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalToDoListApplication</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Damit haben wir die Grundlagen geschaffen und können uns jetzt dem Inhalt der Methode <code>sendDueNotifications</code> widmen.
Diese soll erst alle fälligen, offenen Tasks laden und dann für jede davon eine Benachrichtigung senden.</p>
<p>Zum Laden der Tasks erweitern wir unseren <code>TaskService</code> um eine Methode</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">OpenTask</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllOpenTasksWithDueDateBeforeOrEqual</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token plain"> date</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Diese soll, wie der Name sagt, alle offenen Tasks zurückgeben, die ein Fälligkeitsdatum vor oder gleich dem
angegebenen Datum haben. Auf die genaue Umsetzung wollen wir an dieser Stelle nicht genau eingehen (wir würden dabei
nichts Neues sehen). Die Grundidee ist aber natürlich, auch eine entsprechende Methode im Repository anzubieten und
diese basierend auf unserem Cache umzusetzen. Die Details dazu könnt ihr euch gerne
im<a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post4" target="_blank" rel="noopener noreferrer">GitHub Repository</a> anschauen.</p>
<p>Das Senden der Benachrichtigungen wollen wir dann wiederrum in entsprechende Adapter auslagern. Dazu definieren wir
uns wie gehabt einen Port</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">application</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">scheduler</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token import namespace" style="opacity:0.7">de</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">colenet</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">hexagonal</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">todo</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">list</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">domain</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">model</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import namespace" style="opacity:0.7">task</span><span class="token import namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token import class-name" style="color:#FAC863">Task</span><span class="token import punctuation" style="color:#8dc891">.</span><span class="token import class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">interface</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationSender</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">sendDueNotification</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>den wir dann später durch einen konkreten Adapter realisieren.</p>
<p>Erst einmal sind wir jetzt aber in der Lage, den Scheduler zu vervollständigen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationScheduler</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Logger</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LoggerFactory</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getLogger</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">DueNotificationScheduler</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Clock</span><span class="token plain"> clock</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationSender</span><span class="token plain"> dueNotificationSender</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">DueNotificationScheduler</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Clock</span><span class="token plain"> clock</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationSender</span><span class="token plain"> dueNotificationSender</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">clock </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> clock</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">dueNotificationSender </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> dueNotificationSender</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">taskService </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Scheduled</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">fixedRateString </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"${notification.interval}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> timeUnit </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TimeUnit</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">SECONDS</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">sendDueNotifications</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">info</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Sending due notifications"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        taskService</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getAllOpenTasksWithDueDateBeforeOrEqual</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDate</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">now</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">clock</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">forEach</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">dueNotificationSender</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">sendDueNotification</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">info</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Finished sending due notifications"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Um auf den ersten Blick sehen zu können, wann unsere Aufgabe ausgeführt wird, haben wir hier außerdem noch ein paar
Logeinträge hinzugefügt.</p>
<p>Es fehlt uns jetzt also nur noch ein konkreter Adapter, der den eben definierten Port realisiert. Hierfür haben wir uns
alle Möglichkeiten offen gelassen: Wir könnten eine E-Mail versenden, unseren favorisierten Chat-Client wie etwa Slack
verwenden, Push-Benachrichtigungen auf Mobilgeräten erzeugen oder was auch immer wir sonst möchten.</p>
<p>Hier wählen wir aber die denkbar einfachste Variante und wollen als „Benachrichtigung” einfach den fälligen Task loggen.
Dazu registrieren wir zuerst in unserem Architekturtest einen neuen Adapter:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">adapter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"console"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAdapterIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"console"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Außerdem vervollständigen wir an dieser Stelle noch ein offenes To-do und entfernen folgende Zeile</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">withOptionalLayers</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token boolean" style="color:#ff8b50">true</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// TODO Remove this as soon as our layers are filled</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>denn all unsere Schichten sind inzwischen mit Inhalt gefüllt (mal abgesehen von dem gerade registrierten
<code>console</code>-Adapter, aber dazu kommen wir nun).</p>
<p>Wie bereits erwähnt wollen wir in diesem neuen Adapter einfach einen Logeintrag als Benachrichtigung erzeugen. Dazu
ist folgende Implementierung völlig ausreichend:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">adapter</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">console</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationLogger</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">DueNotificationSender</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Logger</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LoggerFactory</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getLogger</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">DueNotificationLogger</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">sendDueNotification</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">warn</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Task is due: {}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Starten wir nun unsere Anwendung und legen uns einen offenen Task mit Fälligkeitsdatum in der Vergangenheit an
(etwa via <code>POST http://localhost:8080/tasks?description=Due&amp;dueDate=2023-07-01</code>), so sehen wir innerhalb kürzester
Zeit (natürlich abhängig vom Parameter <code>notification.interval</code>) folgende Logeinträge (zur Übersichtlichkeit aufs
Wesentliche reduziert):</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain">INFO: Sending due notifications</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">WARN: Task is due: OpenTask[id=5d3fcb2d-b8c9-47d2-9ba9-c95e7be05b65, description=Due, dueDate=Optional[2023-07-01]]</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">INFO: Finished sending due notifications</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Abschließend wollen wir noch aus Bequemlichkeit zum Anwendungsstart automatisch einige Beispieltasks anlegen, um
unsere neuen Benachrichtigungen sofort beobachten zu können, ohne manuell fällige Tasks anlegen zu müssen.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erzeugung-von-beispieltasks">Erzeugung von Beispieltasks<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4#erzeugung-von-beispieltasks" class="hash-link" aria-label="Direkter Link zur Erzeugung von Beispieltasks" title="Direkter Link zur Erzeugung von Beispieltasks">​</a></h2>
<p>Wie erwähnt handelt es sich auch hierbei um eine Aufgabe, die sich typischerweise in der Applikationsschicht ansiedelt.
Hierzu bauen wir uns lediglich eine neue Klasse <code>ExampleTaskCreator</code> in
<code>de.colenet.hexagonal.todo.list.application.startup</code>, die eine Handvoll <code>Task</code>-Objekte erzeugt und diese dann mittels
<code>TaskRepository::save</code> abspeichert. Außerdem wollen wir dieses Verhalten dynamisch ein- und ausschaltbar machen und
legen uns dazu eine neue Eigenschaft <code>startup.exampletasks.create</code> in den <code>application.properties</code> an, die wir mit
<code>true</code> vorkonfigurieren. Da wir diesen Prozess einmalig nach dem Anwendungsstart ausführen wollen, kennzeichnen wir
die entsprechende Methode außerdem mit <code>@EventListener(ApplicationReadyEvent.class)</code>. Alles in allem landen wir bei
folgender Implementierung:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@ConditionalOnProperty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">prefix </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"startup"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> name </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"exampletasks.create"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> havingValue </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"true"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ExampleTaskCreator</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Logger</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LoggerFactory</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getLogger</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">ExampleTaskCreator</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">ExampleTaskCreator</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">taskRepository </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@EventListener</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">ApplicationReadyEvent</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createExampleTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">info</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Creating some example tasks"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">Stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">randomUUID</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token string" style="color:#8dc891">"[EXAMPLE] This task was completed yesterday"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">empty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">now</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">minusDays</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token number" style="color:#5a9bcf">1L</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                </span><span class="token comment" style="color:#999999">// ... more example tasks</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">forEach</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskRepository</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token constant" style="color:#5a9bcf">LOGGER</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">info</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Example tasks successfully created"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ausblick">Ausblick<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4#ausblick" class="hash-link" aria-label="Direkter Link zur Ausblick" title="Direkter Link zur Ausblick">​</a></h2>
<p>Damit sind wir fast am Ende der Reihe angelangt. Unsere Applikation beinhaltet nun jegliche beabsichtigte Funktionalität
und wir haben alle Schichten der hexagonalen Architektur in Verwendung gesehen.</p>
<p>In nächsten und gleichzeitig letzten Teil der Reihe wollen wir uns schließlich noch anschauen, wie wir unseren In-Memory
Cache durch eine echte, persistente Datenbank ersetzen können. Dazu werden wir exemplarisch eine MongoDB verwenden.
Konzeptuell lässt sich die Vorgehensweise aber natürlich auch auf andere Datenbanken übertragen.</p>]]></content:encoded>
            <category>Domain-driven Design</category>
            <category>Hexagonale Architektur</category>
            <category>Softwarearchitektur</category>
            <category>Softwareentwicklung</category>
        </item>
        <item>
            <title><![CDATA[Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt – Teil 3: REST-Schnittstelle mit Antikorruptionsschicht]]></title>
            <link>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3</link>
            <guid>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3</guid>
            <pubDate>Mon, 08 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[banner]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="banner" src="https://ricardo-schnur.github.io/assets/images/banner-3c6221cdc4cb306e621cac5c416145fb.webp" width="1028" height="611" class="img_ev3q"></p>
<blockquote>
<p>Um zu verstehen, wie hexagonale Architektur die Art und Weise, Software zu entwickeln, verändert und was dabei
die Vorteile sind, führt Ricardo uns Schritt für Schritt durch die Entwicklung einer To-Do-Listen-Anwendung.
Im 3. Teil wird nun über eine REST-Schnittstelle die Anwendung interaktiv nutzbar gemacht und die Datenintegrität
durch eine Antikorruptionsschicht sichergestellt.</p>
</blockquote>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<p>Diese Artikel-Reihe ist der hexagonalen Architektur gewidmet: Wir möchten ihre Grundprinzipien verstehen und diese in
der Praxis erleben. Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung
praktisch realisieren lässt. Dazu werden wir Schritt für Schritt eine kleine <strong>To-do-Listen-Anwendung</strong> entwickeln, die
es
ermöglichen soll, Tasks anzulegen, angelegte Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird
über eine REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar entweder In-Memory oder persistent in
einer echten MongoDB verwaltet.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1" target="_blank" rel="noopener noreferrer">Im ersten Teil</a> dieser Serie haben wir
ein frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert. Wir haben uns
überlegt, wie wir uns die Architektur der Anwendung und ihre Umsetzung vorstellen und diese Vorstellung mittels ArchUnit
in einem automatisierten Architekturtest festgehalten.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2" target="_blank" rel="noopener noreferrer">Im zweiten Teil</a> sind wir mit der
Modellierung der Domäne, der Implementierung der Kernlogik und der Datenhaltung der
Anwendung in die eigentliche Entwicklung gestartet.</p>
<p>Nun möchten wir unsere Anwendung auch interaktiv nutzbar machen und zu diesem Zweck eine REST-Schnittstelle
bereitstellen.
Genauer möchten wir</p>
<ul>
<li>einen <code>GET</code>-Endpunkt <code>/task</code>, der uns alle existierenden Tasks zurückliefert,</li>
<li>einen <code>POST</code>-Endpunkt <code>/task</code>, der es uns erlaubt, einen neuen Task anzulegen und den angelegten Task zurückliefert,
sowie</li>
<li>einen <code>POST</code>-Endpunkt <code>/task/toggle-completion/{id}</code>, der es uns erlaubt, den Zustand eines existierenden
Tasks umzuschalten und den umgeschalteten Task zurückliefert.</li>
</ul>
<p>Hierbei soll der <code>POST</code>-Endpunkt <code>/task</code> mit einem Parameter <code>description</code> aufgerufen werden können.
Mögliche Requests sehen dann etwa folgendermaßen aus:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain">GET http://localhost:8080/tasks</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">POST http://localhost:8080/tasks?description=Some%20Task</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">POST http://localhost:8080/tasks/toggle-completion/69676cbb-430c-4be8-a3f2-f15cf9e976c3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Außerdem wollen wir natürlich auch mit fehlerhaften Benutzereingaben (wie etwa leerer <code>description</code> oder unbekannter
<code>id</code>) umgehen können und werden dazu eine sogenannte Antikorruptionsschicht zwischen unsere Kernlogik und den
REST-Adapter schalten. In einem ersten Schritt wollen wir uns aber erst einmal wieder mit Datenmodellen befassen.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Ihr findet den aktuellen Stand des Projekts sowie die Änderungen auch aus diesem Teil
auf <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post3" target="_blank" rel="noopener noreferrer">GitHub</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tasks-mittels-eines-dedizierten-modells-serialisierbar-machen">Tasks mittels eines dedizierten Modells serialisierbar machen<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3#tasks-mittels-eines-dedizierten-modells-serialisierbar-machen" class="hash-link" aria-label="Direkter Link zur Tasks mittels eines dedizierten Modells serialisierbar machen" title="Direkter Link zur Tasks mittels eines dedizierten Modells serialisierbar machen">​</a></h2>
<p>Als wir unser Domänenobjekt <code>Task</code> modelliert haben, haben wir uns bewusst <em>nicht</em> mit technischen Belangen
auseinandergesetzt, sondern uns komplett auf die Fachlichkeit fokussiert. Entsprechend ungeeignet ist dieses Modell
daher als Austauschformat. Das ist aber nicht weiter problematisch: Wir definieren uns nun ein
dediziertes Transfermodell <code>TaskDto</code>, das möglichst schlank und einfach (de-)serialisierbar sein soll, und
konvertieren dann nach Bedarf zwischen <code>Task</code> und <code>TaskDto</code> hin und her.</p>
<p>Dieses Transfermodell ist ein technisches
Detail unserer REST-Schnittstelle und wird daher auch Teil unseres <strong>REST-Adapters</strong>, den wir in diesem Abschnitt
anlegen.
Da nach unseren Architekturregeln keine andere Schicht und auch kein anderer Adapter auf diesen REST-Adapter
zugreifen darf, ist hierdurch sichergestellt, dass wir das Transfermodell <code>TaskDto</code> einzig lokal in diesem
Adapter verwenden und es sich nicht durch den Rest unserer Codebasis verbreiten wird.</p>
<p>Die Implementierung ist denkbar einfach gehalten:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">adapter</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">rest</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">model</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> state</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> completionTime</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Statt eines Summentyps verwenden wir jetzt einen Produkttyp mit dem zusätzlichen Feld <code>state</code> als Diskriminator.
Außerdem verwenden wir simple, serialisierbare Typen für alle Eigenschaften. Hierdurch gehen uns natürlich einige
Garantien verloren, dafür erhalten wir eine flache, serialisierbare Struktur.</p>
<p>Um mit dem neu erzeugten Modell <code>TaskDto</code> arbeiten zu können, brauchen wir noch eine Möglichkeit einen <code>Task</code>
in ein <code>TaskDto</code> umzuwandeln. Dazu bauen wir uns einen Mapper mit einer entsprechenden Methode
<code>TaskDto toDto(Task model)</code>. In dieser werden wir wieder <em>Pattern Matching</em> verwenden mit der Konvention, unbenutzte
Parameter mit einem Unterstrich zu kennzeichnen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">adapter</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">rest</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">mapper</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiMapper</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            model</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">              </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"open"</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">              </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"completed"</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">model</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">              </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> __ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">              </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="anlegen-eines-rest-controllers">Anlegen eines REST-Controllers<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3#anlegen-eines-rest-controllers" class="hash-link" aria-label="Direkter Link zur Anlegen eines REST-Controllers" title="Direkter Link zur Anlegen eines REST-Controllers">​</a></h2>
<p>Nachdem wir uns über die Datenstrukturen im Klaren sind, können wir jetzt zur Implementierung der Endpunkte übergehen.
Dazu starten wir mit einem Controller, der Zugriff auf unseren Service sowie auf den neu angelegten Mapper haben wird:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">adapter</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">rest</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">controller</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiMapper</span><span class="token plain"> restApiMapper</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiMapper</span><span class="token plain"> restApiMapper</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">restApiMapper </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> restApiMapper</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">taskService </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> taskService</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wir wollen uns in einem ersten Schritt um den <strong><code>GET</code>-Endpunkt</strong> kümmern, der alle existierenden Tasks zurückliefern
soll.
Dazu rufen wir die entsprechende Methode in unserem Service auf, wandeln die Resultate mittels unseres Mappers in
Dtos um und verpacken das Ergebnis schließlich in einer <code>ResponseEntity</code>. Die Methode annotieren wir schließlich
noch mit <code>@GetMapping</code>, alles Weitere erledigt Spring dann automatisch im Hintergrund.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@GetMapping</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"/tasks"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> produces </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MediaType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">APPLICATION_JSON_VALUE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskDto</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">stream</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toList</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">T</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">T</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">T</span><span class="token plain"> value</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HttpStatus</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">OK</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Für den <strong>Endpunkt zum Anlegen eines neuen Tasks</strong> gehen wir völlig analog vor, nur dass wir hier noch einen Parameter
zu
berücksichtigen haben:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@PostMapping</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"/tasks"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> produces </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MediaType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">APPLICATION_JSON_VALUE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token annotation punctuation" style="color:#8dc891">@RequestParam</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Schließlich fehlt uns noch der <strong>Endpunkt zum Umschalten des Zustands eines existierenden Tasks.</strong> Auch hier verfolgen
wir wieder das Schema, die entsprechende Logik im Service aufzurufen und das Resultat umzuwandeln, müssen jedoch
auch beachten, dass wir diesmal erst unseren <code>id</code> Parameter von <code>String</code> zu <code>UUID</code> konvertieren müssen und wir
außerdem mit der Situation, dass es keinen Task mit der angegebenen ID gibt, umgehen können müssen. In diesem Fall
werden wir schlicht mit dem Status <code>400 Bad Request</code> antworten.</p>
<p>Damit gestaltet sich die Methode folgendermaßen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@PostMapping</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"/tasks/toggle-completion/{id}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> produces </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MediaType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">APPLICATION_JSON_VALUE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token annotation punctuation" style="color:#8dc891">@PathVariable</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> taskService</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fromString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">orElseGet</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">T</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">T</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">HttpStatus</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">BAD_REQUEST</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Hiermit haben wir nun eine voll funktionsfähige Anwendung!</p>
<p>Im <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post3" target="_blank" rel="noopener noreferrer">GitHub Repository</a> findet ihr
außerdem noch
<strong>Unit- und Integrationstests</strong> für unseren neuen Controller (<code>RestApiControllerTest</code>
und <code>RestApiControllerIntegrationTest</code>).</p>
<p>Zusätzlich ist es uns jetzt auch möglich, <strong>End-To-End-Tests</strong>, die einen vollständigen Anwendungskontext hochfahren,
eine
Folge von REST-Requests absetzen und von der Anwendung entsprechende Antworten erwarten, zu schreiben. Diese möchte
ich an dieser Stelle kurz demonstrieren, da sie auch demonstrieren, wie unsere Anwendung zu verwenden ist:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@SpringBootTest</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">webEnvironment </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">SpringBootTest</span><span class="token class-name punctuation" style="color:#8dc891">.</span><span class="token class-name" style="color:#FAC863">WebEnvironment</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">RANDOM_PORT</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalToDoListApplicationEndToEndTests</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token annotation punctuation" style="color:#8dc891">@Autowired</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TestRestTemplate</span><span class="token plain"> restTemplate</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token annotation punctuation" style="color:#8dc891">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">returnsEmptyListIfNoTasksHaveBeenCreated</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> result </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getStatusCode</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">HttpStatus</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">OK</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEmpty</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token annotation punctuation" style="color:#8dc891">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">creatingTasksIsPossibleAndCreatedTasksAreReturnedFromGetAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> descriptions </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Some description"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"Some other description"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    descriptions</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">forEach</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> result </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getStatusCode</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">HttpStatus</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">OK</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">usingRecursiveFieldByFieldElementComparatorIgnoringFields</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"id"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">containsExactlyInAnyOrder</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"Some description"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"open"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                    </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"Some other description"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"open"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">extracting</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">extracting</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">fromString</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">doesNotContainNull</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token annotation punctuation" style="color:#8dc891">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">completionStateOfTasksCanBeToggledAndTogglingOnlyChangesStateAndCompletionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> createdTask </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Some description"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">createdTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">state</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"open"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> id </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> createdTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> toggledTask </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">usingRecursiveComparison</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ignoringFields</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"state"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"completionTime"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">createdTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">state</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"completed"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isNotNull</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> toggledTwiceTask </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTwiceTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">createdTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">var</span><span class="token plain"> toggledThriceTask </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getBody</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledThriceTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">usingRecursiveComparison</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ignoringFields</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"completionTime"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isEqualTo</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token function" style="color:#79b6f2">assertThat</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">parse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledThriceTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">isAfter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">parse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">toggledTask</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">completionTime</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskDto</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restTemplate</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">exchange</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"/tasks"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HttpMethod</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">GET</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ParameterizedTypeReference</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskDto</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restTemplate</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">postForEntity</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token class-name" style="color:#FAC863">UriComponentsBuilder</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fromPath</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"/tasks"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">queryParam</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"description"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">build</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toUri</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">TaskDto</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restTemplate</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">postForEntity</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"/tasks/toggle-completion/{id}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">null</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskDto</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Map</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"id"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Was uns jetzt noch fehlt, ist die eingangs erwähnte Antikorruptionsschicht. Diese soll verhindern, dass Tasks mit leerer
Beschreibung angelegt werden (was derzeit möglich wäre, aber unserer Fachlichkeit widerspricht) oder aber, dass der
Benutzer versucht, den <em>Toggle</em>-Endpunkt mit einem <code>id</code>-Wert aufzurufen, der keine gültige UUID darstellt (was
derzeit zu einer Exception führen würde).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="datenintegrität-durch-eine-antikorruptionsschicht">Datenintegrität durch eine Antikorruptionsschicht<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3#datenintegrit%C3%A4t-durch-eine-antikorruptionsschicht" class="hash-link" aria-label="Direkter Link zur Datenintegrität durch eine Antikorruptionsschicht" title="Direkter Link zur Datenintegrität durch eine Antikorruptionsschicht">​</a></h2>
<p>Der sicherlich gängigste Weg im Spring-Umfeld zur Sicherstellung der Datenintegrität an Endpunkten ist die Verwendung
von <em>Bean Validation</em>. Diese erfüllt den Zweck vollkommen und ist für Produktivprojekte auch klar zu empfehlen. Da
dieser
Mechanismus aber weitestgehend auf der Verwendung von Annotationen basiert, möchte ich hier zur besseren
Nachvollziehbarkeit stattdessen eine manuelle Implementierung vornehmen.</p>
<p>In der Theorie siedelt sich eine solche Antikorruptionsschicht zwischen Adapter und Kernlogik an und soll dafür sorgen,
dass die Kernlogik stets nur mit validen Daten aufgerufen wird. Das hat den immensen Vorteil, dass wir uns dann dort
niemals Gedanken um invalide Zustände machen müssen und daher dort auch nicht <em>defensiv</em> programmieren müssen. Eine
solche
Schicht macht daher nicht nur an der Grenze zu einem REST-Adapter Sinn, sondern überall, wo potenziell invalide
Datensätze von der Außenwelt an uns herangetragen werden (wie etwa eine Datenbank, über die wir nicht die alleinige
Kontrolle haben, Message-Queues, Lesen vom Dateisystem).</p>
<figure style="text-align:center"><img src="https://ricardo-schnur.github.io/assets/images/anti_corruption_layer-588d621c6a7a7ce61c6427551edfba66.png" alt="missing" height="500"><figcaption>Antikorruptionsschicht: Zwischen Adapter und Kernlogik</figcaption></figure>
<p>Praktisch wollen wir diese Validierung der Daten daher im entsprechenden Adapter unterbringen, da diese nur dort
Sinn macht. Denn in anderen Adaptern haben wir vermutlich andere Austauschformate und benötigen daher andere
Validierungen.</p>
<p>Dazu werden wir uns nun einen <code>RestApiValidator</code> unterhalb des REST-Adapter-Pakets in
<code>de.colenet.hexagonal.todo.list.adapter.rest.validator</code> anlegen. Dieser soll uns zwei Methoden - <code>validateId</code>
und <code>validateDescription</code> - anbieten, die jeweils einen unvalidierten <code>String</code> entgegennehmen und uns im Erfolgsfall
eine
validierte <code>UUID</code>, respektive einen validierten <code>String</code>, zurückliefern.</p>
<p>Hierzu verwenden wir
die <a href="https://docs.vavr.io/#_validation" target="_blank" rel="noopener noreferrer">Validation API von Vavr</a>, die es uns auf elegante Art und Weise erlaubt,
solche Validierungen inklusive der Berücksichtigung von Fehlern zu implementieren. Insbesondere erlaubt uns diese API,
mehrere
fehlgeschlagene Validierungen zu kombinieren und so dem Benutzer direkt Rückmeldung über jeglichen invaliden Input
zurückzumelden (hierbei sprechen wir von einem <em>Fail-Slow</em> Ansatz). Hierzu entschließen wir uns, da wir im nächsten
Teil der Serie unser Domänenmodell erweitern wollen und wir dann für den Endpunkt zum Anlegen eines neuen Tasks
mehrere Parameter entgegennehmen werden.
Im Gegensatz zum <em>Fail-Slow</em> Ansatz würde die - im Java-Umfeld gängige - Methode, bei fehlgeschlagener Validierung
eine Exception zu werfen, nur den ersten Validierungsfehler zurückmelden (ein sogenannter <em>Fail-Fast</em> Ansatz).</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Randbemerkung</div><div class="admonitionContent_BuS1"><p>Bei dem von uns gewählten <em>Fail-Slow</em>-Ansatz handelt es sich um eine in der funktionalen Programmierung
gängigen Technik. Das Konzept ist in diesem Kontext als <em>Validierung mittels applikativer Funktoren</em> geläufig.</p></div></div>
<p>Kommen wir nun also zur Umsetzung des Validators. Zur Validierung der <code>description</code> wollen wir nur
überprüfen, dass sie nicht leer ist, und ansonsten eine entsprechende Fehlermeldung generieren:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateDescription</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token operator" style="color:#d7deea">!</span><span class="token class-name" style="color:#FAC863">StringUtils</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">hasText</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">invalid</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"Description is mandatory"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">valid</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Der Rückgabetyp <code>Validation</code> ist hierbei ein von Vavr bereitgestelltes Interface, welches als ersten Typparameter
den Typ des Fehlerobjekts und als zweiten Typparameter den Typ des Erfolgsobjekts erwartet. Für die Validierung
unserer ID wird der zweite Typparameter daher <code>UUID</code> sein und im nächsten Post werden wir auch eine Liste von
Strings als Fehlertyp sehen.</p>
<p>Die Validierung der ID folgt demselben Schema, hier müssen wir jedoch zusätzlich prüfen, dass der Eingabewert eine
valide UUID darstellt.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> UUID</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">validateId</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token operator" style="color:#d7deea">!</span><span class="token class-name" style="color:#FAC863">StringUtils</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">hasText</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Validation</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">invalid</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"ID is mandatory"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Try</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">of</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fromString</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">toValidation</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">__ </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"Not a valid UUID: "</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Mittels <code>Try</code> fangen wir hier die von <code>UUID::fromString</code> im Fehlerfall geworfene Exception und wandeln sie in
ein <code>Validation</code>-Objekt mit entsprechender Fehlermeldung um.</p>
<p>Nun müssen wir diese Validierungen nur noch in unserem <code>RestApiController</code> jeweils vor dem Aufruf der Kernlogik
unterbringen. Dazu injizieren wir eine Instanz <code>restApiValidator</code> des gerade entworfenen Validators in den Controller
und erweitern unsere Methoden dort folgendermaßen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@PostMapping</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"/tasks"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> produces </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MediaType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">APPLICATION_JSON_VALUE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token annotation punctuation" style="color:#8dc891">@RequestParam</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restApiValidator</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">validateDescription</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fold</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@PostMapping</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">value </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"/tasks/toggle-completion/{id}"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> produces </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">MediaType</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">APPLICATION_JSON_VALUE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token annotation punctuation" style="color:#8dc891">@PathVariable</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> restApiValidator</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">validateId</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskService</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">fold</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                  </span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                  toggledTask </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                          toggledTask</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                                  </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">restApiMapper</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">toDto</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                                  </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics operator" style="color:#d7deea">?</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">RestApiController</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">createOkResponse</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">                                  </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">orElseGet</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"No task found for id: "</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">          </span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">String</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createBadRequestResponse</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> message</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">  </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ResponseEntity</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">message</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HttpStatus</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">BAD_REQUEST</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Natürlich haben wir im Repository auch Unittests für den Validator mit aufgenommen und unsere bestehenden Tests
erweitert.</p>
<p><strong>Damit ist der erste Wurf unserer Anwendung komplett.</strong></p>
<p>Probiert sie doch gerne mal aus: Legt Tasks an, lasst euch diese anzeigen, vervollständigt sie und setzt auch mal
absichtlich Requests mit invaliden Daten ab, wie etwa:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token plain">POST http://localhost:8080/tasks?description=%20</span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">POST http://localhost:8080/tasks/toggle-completion/not-a-valid-uuid</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ausblick">Ausblick<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3#ausblick" class="hash-link" aria-label="Direkter Link zur Ausblick" title="Direkter Link zur Ausblick">​</a></h2>
<p>Im kommenden Teil wollen wir uns anschauen, wie sich eine Anpassung am Domänenmodell auf die Anwendung auswirkt. Dazu
werden wir unseren Tasks ein Fälligkeitsdatum hinzufügen. Dieses werden wir dann auch nutzen, um die bisher noch
unberührte Applikationsschicht mit Leben zu füllen, indem wir uns einen geplanten Auftrag anlegen, der uns regelmäßig
über fällige Tasks benachrichtigt. Außerdem wollen wir die Möglichkeit bieten, beim Anwendungsstart automatisch einige
Beispieltasks zu erzeugen.</p>]]></content:encoded>
            <category>Domain-driven Design</category>
            <category>Hexagonale Architektur</category>
            <category>Softwarearchitektur</category>
            <category>Softwareentwicklung</category>
        </item>
        <item>
            <title><![CDATA[Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt – Teil 2: Modellierung, Kernlogik und In-Memory Cache]]></title>
            <link>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2</link>
            <guid>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2</guid>
            <pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[banner]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="banner" src="https://ricardo-schnur.github.io/assets/images/banner-42d0f311365c82066b675100c3744901.webp" width="1031" height="688" class="img_ev3q"></p>
<blockquote>
<p>Um zu verstehen, wie hexagonale Architektur die Art und Weise, Software zu entwickeln verändert und was dabei
die Vorteile sind, führt Ricardo uns Schritt für Schritt durch die Entwicklung einer To-Do-Listen-Anwendung.
In dieser Folge startet nun die eigentliche Entwicklung mit der Modellierung der Domäne, der Kernlogik der
Anwendung sowie der Datenhaltung in einem Cache.</p>
</blockquote>
<!-- -->
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="das-vorhaben-hexagonale-architektur-in-der-praxis-verstehen">Das Vorhaben: Hexagonale Architektur in der Praxis verstehen<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2#das-vorhaben-hexagonale-architektur-in-der-praxis-verstehen" class="hash-link" aria-label="Direkter Link zur Das Vorhaben: Hexagonale Architektur in der Praxis verstehen" title="Direkter Link zur Das Vorhaben: Hexagonale Architektur in der Praxis verstehen">​</a></h2>
<p>Diese Artikel-Reihe ist der hexagonalen Architektur gewidmet: Wir möchten ihre Grundprinzipien verstehen und dazu in der
Praxis erleben. Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung praktisch
realisieren lässt. Dazu werden wir Schritt für Schritt eine kleine <strong>To-do-Listen-Anwendung</strong> entwickeln, die es
ermöglichen
soll, Tasks anzulegen, angelegte Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird über eine
REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar entweder In-Memory oder persistent in einer echten
MongoDB verwaltet.</p>
<p><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1" target="_blank" rel="noopener noreferrer">Im ersten Teil dieser Serie</a> haben wir
ein frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert. Wir haben uns
überlegt, wie wir uns die Architektur der Anwendung und ihre Umsetzung vorstellen und diese Vorstellung mittels ArchUnit
in einem automatisierten Architekturtest festgehalten.</p>
<p>Nun wollen wir mit der tatsächlichen Entwicklung starten und uns in diesem Teil der Serie mit der Modellierung der
Domäne, der Kernlogik der Anwendung sowie dem Bereitstellen einer Schnittstelle – um die Anwendung auch wirklich
verwenden zu können – befassen.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Den Code findet ihr auch zu diesem Teil zum Nachvollziehen
auf <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2" target="_blank" rel="noopener noreferrer">GitHub</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="das-domänenmodell">Das Domänenmodell<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2#das-dom%C3%A4nenmodell" class="hash-link" aria-label="Direkter Link zur Das Domänenmodell" title="Direkter Link zur Das Domänenmodell">​</a></h2>
<p>Für unsere To-do-Listen-Anwendung soll es ein einziges Domänenobjekt geben, nämlich einen <em>Task</em>. Dieser soll ganz
grundlegende Informationen enthalten: Eine <em>Beschreibung</em>, den <em>Zustand</em>, ob der Task noch <em>offen</em>, oder er bereits
<em>erledigt</em>
ist und, falls erledigt, den <em>Abschlusszeitpunkt</em>. Außerdem wollen wir den Objekten noch eine ID zuweisen, um sie
eindeutig identifizieren zu können (und zum Beispiel zwei offene Tasks mit gleicher Beschreibung voneinander
unterscheiden zu können).</p>
<p>Bei der Realisierung dieses Modells im Code wollen wir uns dabei so genau wie möglich an den Domänenanforderungen
orientieren. Insbesondere wollen wir uns hier nicht von infrastrukturellen/technischen Gedanken wie <em>Lässt sich das
Modellobjekt serialisieren?, Ist das Design geeignet für eine relationale Datenbank?</em> oder Ähnlichen beeinflussen
lassen.
Für solche Belange werden wir stattdessen später dedizierte, optimierte Datenstrukturen anlegen und im entsprechenden
Kontext (lokal!) verwenden. Im Herzen unserer Anwendung wollen wir hingegen so nahe an der Fachdomäne sein wie möglich.</p>
<p>Wir wollen also <strong>einerseits die Typen unserer Eigenschaften so spezifisch und aussagekräftig wie möglich wählen</strong> –
etwa
soll unsere ID vom Typ UUID und nicht etwa nur ein String oder int sein – und <strong>andererseits wollen wir es unmöglich
(bzw. in der Praxis zumindest möglichst schwierig) machen, in der Domäne <em>unmögliche Zustände</em> überhaupt darstellen
zu können</strong> (und damit Fehler kategorisch ausschließen).</p>
<p>Der zweite Punkt bedeutet für uns an dieser Stelle konkret, dass wir nicht etwa ein einziges Task-Objekt in der Form</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">enum</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskState</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token constant" style="color:#5a9bcf">OPEN</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">CLOSED</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskState</span><span class="token plain"> state</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token plain"> completionTime</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>darstellen möchten, denn sonst würde uns nichts davon abhalten, einen offenen Task mit gesetzter Abschlusszeit
anzulegen.</p>
<p>Stattdessen wollen wir strikt zwischen offenen und geschlossenen Tasks unterscheiden und nur geschlossenen Tasks
die Eigenschaft <code>completionTime</code> zuzuordnen. In der Theorie sprechen wir hierbei von einem sogenannten <strong>Summentyp</strong>,
wohingegen die ungewünschte Darstellung oben einen <strong>Produkttyp</strong> darstellt. Zur Umsetzung können wir dazu das
kürzlich mit Java 17 eingeführte <code>sealed</code> Schlüsselwort verwenden:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">sealed</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">interface</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">record</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token plain"> completionTime</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Dieses Interface legen wir dabei entsprechend unserer Überlegungen im vorangegangen Post im Paket
<code>de.colenet.hexagonal.todo.list.domain.model.task</code> ab. Durch das Versiegeln des Interfaces <code>Task</code> stellen wir sicher,
dass dieses ausschließlich von den beiden im Rumpf
definierten Klassen <code>OpenTask</code> und <code>CompletedTask</code> implementiert werden kann.
Dass wir die geteilten Eigenschaften <code>id</code> und <code>description</code> zusätzlich zu den Klasseneigenschaften auch noch im
Interface direkt deklarieren, ist strikt optional und hat rein ergonomische Gründe: An vielen Stellen der Anwendung
wird es uns nicht interessieren, ob ein konkreter Task noch offen oder schon abgeschlossen ist, und hierdurch ersparen
wir uns an diesen Stellen Fallunterscheidungen.</p>
<p>Wollten wir in unserer Modellierung noch genauer sein, so könnten wir uns für unsere <code>description</code> auch noch einen
Datentyp <code>NonEmptyString</code> mit entsprechender Absicherung der geforderten <em>nicht-leer</em> Bedingung im Konstruktor anlegen,
der Einfachheit halber sehen wir davon an dieser Stelle aber ab.</p>
<p>Gewappnet mit dieser Darstellung unseres Domänenmodells wollen wir uns nun der Kernfunktionalität unserer Anwendung
zuwenden: dem Erzeugen, Abschließen und Ausgeben von solchen Tasks.</p>
<p>In einem kommenden Teil der Serie werden wir uns außerdem anschauen, wie wir dieses Modell erweitern können, und welche
Auswirkungen das auf unsere (bis dahin schon funktionale) Anwendung haben wird.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="die-kernfunktionalität-domain-services">Die Kernfunktionalität: <em>Domain Services</em><a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2#die-kernfunktionalit%C3%A4t-domain-services" class="hash-link" aria-label="Direkter Link zur die-kernfunktionalität-domain-services" title="Direkter Link zur die-kernfunktionalität-domain-services">​</a></h2>
<p>Nun wollen wir uns die gewünschte Funktionalität auf <em>fachlicher</em> Ebene anschauen. Dabei werden wir schnell bemerken,
dass
wir uns um die "eigentliche" Arbeit an dieser Stelle nur wenige Gedanken machen müssen und diese stattdessen einfach in
die Zukunft verschieben können (nämlich in den nächsten Abschnitt, in dem wir uns mit der Datenhaltung in einem Cache
befassen werden).</p>
<p>Im Grunde genommen wollen wir drei Grundfunktionalitäten:</p>
<ol>
<li>Wir wollen einen neuen Task anlegen können (der im Zustand <em>offen</em> sein soll).</li>
<li>Wir wollen alle existierenden Tasks abrufen können.</li>
<li>Wir wollen den Zustand eines Tasks umschalten können.</li>
</ol>
<p>Das führt uns zu folgenden Methodensignaturen, die wir mit Leben füllen wollen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Hierbei machen wir mit dem Rückgabetypen <code>Optional&lt;Task&gt;</code> in der letzten Methode deutlich, dass diese fehlschlagen kann,
wenn kein Task mit der gegebenen ID existiert.</p>
<p>Wie bereits angedeutet, wollen wir einen Großteil der Implementierung in unsere Persistenzschicht
(oder genauer, den Persistenz<em>adapter</em>) auslagern. Im Sinne unserer hexagonalen Architektur, die auch als <em>Ports und
Adapter</em> bekannt ist, legen wir uns dazu einen Port (In der Form eines Interfaces) an, in dem wir uns <em>wünschen</em>, was
ein eventueller Persistenzadapter doch bitte für uns erledigen soll:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">domain</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">service</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">task</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">interface</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">find</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Solche Ports zählen dabei zur Geschäftslogik und liegen damit auch in unserem <em>Domain Services</em>-Paket.
Die Ausimplementierungen der Ports befinden sich hingegen in den entsprechenden Adaptern.</p>
<p>Mithilfe dieses Ports können wir nun unsere eigentliche Serviceklasse anlegen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">domain</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">service</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">task</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskService</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain">taskRepository </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token comment" style="color:#999999">// TODO</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token comment" style="color:#999999">// TODO</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token comment" style="color:#999999">// TODO</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Die Ausimplementierung der drei Methoden gestaltet sich jetzt sehr einfach. Zum Erzeugen eines Tasks wollen wir einfach
einen neuen, offenen Task mit zufällig generierter ID über den Port anlegen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">createTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">UUID</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">randomUUID</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> description</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Und das Laden können wir vollständig an den Port delegieren:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAllTasks</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">getAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Um den Zustand von Tasks abzuändern, nutzen wir das mit Java 21 neu eingeführte
Feature <a href="https://openjdk.org/jeps/433" target="_blank" rel="noopener noreferrer">Pattern Matching for switch</a> in Kombination mit <em>Switch Expressions</em>.
Außerdem nutzen wir auch hier wieder den Port:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">toggleCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> taskRepository</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">find</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token keyword" style="color:#c5a5c5">this</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">withToggledCompletionState</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">map</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">taskRepository</span><span class="token operator" style="color:#d7deea">::</span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">withToggledCompletionState</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LocalDateTime</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">now</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">clock</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">case</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">CompletedTask</span><span class="token plain"> t </span><span class="token operator" style="color:#d7deea">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">OpenTask</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> t</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">description</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Hierbei verwenden wir ein <code>Clock clock</code> Objekt, welches wir analog zum Repository über den Konstruktor injizieren,
um unseren Code testbar zu halten. Die entsprechende Konfiguration dafür legen wir in einem technischen Modul an:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token keyword" style="color:#c5a5c5">package</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">de</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">colenet</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">hexagonal</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">todo</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">list</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">domain</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">service</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">technical</span><span class="token namespace punctuation" style="opacity:0.7;color:#8dc891">.</span><span class="token namespace" style="opacity:0.7">clock</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// Omitted for clarity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token annotation punctuation" style="color:#8dc891">@Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ClockConfiguration</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Bean</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Clock</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">clock</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Clock</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">systemDefaultZone</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Testbarkeit ist übrigens einer der großen Vorteile, die uns die gewählte Architektur liefert.</strong> Obwohl wir noch keine
Implementierung für den Port haben, können wir an dieser Stelle bereits Unittests für unseren Service schreiben, indem
wir den Port mocken. Das führt auch automatisch dazu, dass wir uns in diesen Tests rein auf die Fachlichkeit
konzentrieren. Das Zusammenspiel der Komponenten werden wir später mittels Integrations- und End-To-End-Tests
überprüfen. Da das Testen nicht der Fokus dieser Serie sein soll, werde ich hier nicht tiefer auf die Unittests
eingehen. Gerne seid ihr aber dazu eingeladen, euch im
begleitenden <a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2" target="_blank" rel="noopener noreferrer">GitHub Repository</a> die
Klasse <code>TaskServiceTest</code> anzuschauen.</p>
<p>Damit steht der Kern unserer Anwendung bereits! Solltet ihr die Anwendung im aktuellen Zustand starten wollen,
werdet ihr aber noch keinen Erfolg haben, da derzeit keine Implementierung für <code>TaskRepository</code> existiert.
Ihr könnt euch natürlich für den Moment eine Dummy-Implementierung anlegen - oder ihr wartet, bis wir uns gleich
dem Cache-Adapter zuwenden.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="in-memory-cache">In-Memory Cache<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2#in-memory-cache" class="hash-link" aria-label="Direkter Link zur In-Memory Cache" title="Direkter Link zur In-Memory Cache">​</a></h2>
<p>Zum Abschluss wollen wir eine konkrete Implementierung für unseren Port <code>TaskRepository</code> in Form eines
simplen Caches anlegen. Wie bereits in unserem Architekturtest verankert, wollen wir diese Implementierung im
Adapter-Paket <code>de.colenet.hexagonal.todo.list.adapter.cache</code> ablegen. Wir werden an dieser Stelle von jeglichen
Optimierungen Abstand halten und stattdessen zu Demonstrationszwecken möglichst einfachen, wenn auch nicht unbedingt
produktionsreifen, Code schreiben. Daher entscheiden wir uns dazu, den Adapter als simplen Wrapper um eine <code>Map</code>
zu realisieren. Die komplette Implementierung lässt sich damit direkt niederschreiben:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@Repository</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskCache</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">implements</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">TaskRepository</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token comment" style="color:#999999">// LinkedHashMap keeps insertion order</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Map</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics">UUID</span><span class="token generics punctuation" style="color:#8dc891">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> tasks </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">new</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">LinkedHashMap</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">save</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">Task</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        tasks</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">put</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">id</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> task</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">find</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">UUID</span><span class="token plain"> id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Optional</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ofNullable</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">tasks</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">get</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token generics punctuation" style="color:#8dc891">&lt;</span><span class="token generics class-name" style="color:#FAC863">Task</span><span class="token generics punctuation" style="color:#8dc891">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAll</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">List</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">copyOf</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">tasks</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">values</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Auch hier möchte ich wieder anmerken, dass wir die Implementierung losgelöst von jeglicher Abhängigkeit ganz einfach
Unit-testen können und auf <code>TaskServiceTest</code> im
<a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2" target="_blank" rel="noopener noreferrer">GitHub Repository</a> hinweisen.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ausblick">Ausblick<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2#ausblick" class="hash-link" aria-label="Direkter Link zur Ausblick" title="Direkter Link zur Ausblick">​</a></h2>
<p><strong>Wir haben bisher eine simple, aber schon funktionale und lauffähige Anwendung entwickelt.</strong> Um diese jedoch wirklich
nutzen zu können, fehlt uns noch eine Steuerungsmöglichkeit. Daher werden wir die Anwendung im nächsten Teil der
Reihe um eine REST-Schnittstelle erweitern, die uns dann die tatsächliche Nutzung ermöglicht.</p>]]></content:encoded>
            <category>Domain-driven Design</category>
            <category>Hexagonale Architektur</category>
            <category>Softwarearchitektur</category>
            <category>Softwareentwicklung</category>
        </item>
        <item>
            <title><![CDATA[Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt – Teil 1: Projektbeschreibung, Setup und automatische Architekturtests]]></title>
            <link>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1</link>
            <guid>https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1</guid>
            <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[banner]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="banner" src="https://ricardo-schnur.github.io/assets/images/banner-1c15903407b9c74a1996793f8daeec3c.webp" width="1031" height="688" class="img_ev3q"></p>
<blockquote>
<p>In der Softwareentwicklung gibt es eine Architektur, die seit einigen Jahren immer mehr an Bedeutung gewinnt –
die hexagonale Architektur. Ricardo erklärt diese Architektur und ihre Grundprinzipien anschaulich und führt uns
in 5 Teilen Schritt für Schritt durch die konkrete Anwendung.</p>
</blockquote>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<p>In der Softwareentwicklung gibt es eine Architektur, die seit einigen Jahren immer mehr an Bedeutung gewinnt – <strong>die hexagonale Architektur</strong>.
Ich hatte mehrfach die Gelegenheit, diese Architektur in Kundenprojekten zu realisieren und konnte dabei direkt miterleben, wie sie die Art und Weise,
wie wir Software entwickeln, verändert.</p>
<p>In dieser Serie werden wir uns diese Architektur genauer anschauen und ihre Grundprinzipien in der Praxis erleben.
Ihr werdet feststellen, <strong>dass sie die Anforderungen unserer Benutzer in den Vordergrund stellt und uns gleichzeitig erlaubt,
den Code auf eine Weise organisieren zu können, die sowohl robust als auch flexibel ist</strong>. Damit trägt sie erheblich zur Wartbarkeit,
Erweiterbarkeit und Testbarkeit unserer Anwendungen bei.</p>
<p>Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung praktisch realisieren lässt.
Dazu werden wir Schritt für Schritt eine kleine <strong>To-do-Listen-Anwendung</strong> entwickeln, die es ermöglichen soll, Tasks anzulegen,
Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird über eine REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar
entweder In-Memory oder persistent in einer echten MongoDB verwaltet.</p>
<p>Zum Einstieg möchte ich kurz darauf eingehen, was gemeint ist, wenn wir von einer hexagonalen Architektur sprechen.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hexagonale-architektur---was-ist-das-überhaupt">Hexagonale Architektur - was ist das überhaupt?<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1#hexagonale-architektur---was-ist-das-%C3%BCberhaupt" class="hash-link" aria-label="Direkter Link zur Hexagonale Architektur - was ist das überhaupt?" title="Direkter Link zur Hexagonale Architektur - was ist das überhaupt?">​</a></h2>
<p>Es handelt sich hierbei um einen Architekturstil, der unter vielen Namen bekannt ist: <em>hexagonale Architektur</em>,
<em>Ports und Adapter</em>, <em>Zwiebelarchitektur (Onion Architecture)</em>, <em>Clean Architecture</em></p>
<p>All diese Architekturstile unterscheiden sich im Detail, basieren aber auf denselben Kernideen und Prinzipien.
Auf die feinen Unterschiede möchte ich an dieser Stelle nicht genauer eingehen, sondern verweise auf die zahlreichen,
online verfügbaren Ressourcen zu diesem Thema, wie etwa den hervorragenden Übersichtsartikel
von <a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/" target="_blank" rel="noopener noreferrer">Herberto Graça (englisch)</a>.</p>
<p>In dieser Serie wollen wir die Unterschiede unterschlagen und die Begriffe <em>hexagonale Architektur</em> und
<em>Zwiebelarchitektur</em> synonym verwenden. Wir verstehen darunter eine Anwendungsarchitektur, die den Code in
konzentrischen Schichten (daher der Name <em>Zwiebel</em>) organisiert. Hierbei sind nur Abhängigkeiten von außen nach innen
gestattet (es dürfen dabei aber Schichten übersprungen werden), sodass insbesondere die innerste Schicht keinerlei
Abhängigkeiten auf den Rest des Codes haben darf. Genauer unterteilen wir unsere Anwendung in die folgenden drei,
von innen nach außen angeordneten Schichten:</p>
<ol>
<li><strong>Domänenschicht</strong>: Beinhaltet die Domänenmodelle und die Kerngeschäftslogik.</li>
<li><strong>Anwendungsschicht</strong>: Ist verantwortlich für anwendungsinterne Aufgaben, die nicht der Kernlogik zuzuordnen
sind. Hierzu gehören etwa die Ausführung von geplanten Aufgaben, Transaktionssteuerung oder auch das
Zusammenführen mehrerer Teile der Kernlogik zu einem Workflow.</li>
<li><strong>Adapterschicht</strong>: Handhabt jegliche Interaktion der Anwendung mit der Außenwelt, wie etwa die Bereitstellung von
API-Endpunkten, Durchführung von Datenbankzugriffen oder die Kommunikation mit anderen Schnittstellen.</li>
</ol>
<p>Die Domänenschicht können wir dabei noch weiter in zwei Teilschichten zerlegen: Modelle (innen) und Logik (außen).
Außerdem kann die Adapterschicht aus mehreren, voneinander unabhängigen, Adaptern bestehen (nämlich ein Adapter je
Anlass). Das Modell lässt sich also folgendermaßen visualisieren:</p>
<figure style="text-align:center"><img src="https://ricardo-schnur.github.io/assets/images/onion_layers-d54a8579bef3ea14b862f79b6e4110dd.png" alt="missing" height="500"><figcaption>Zwiebelmodell: Schichten</figcaption></figure>
<p>Die Zwiebelarchitektur liefert eine Reihe von Vorteilen, etwa:</p>
<ul>
<li><strong>Domänenzentriertes Design</strong>: Die Kerngeschäftslogik wird gegenüber von Infrastrukturangelegenheiten klar in den
Fokus gesetzt.</li>
<li><strong>Testbarkeit</strong>: Die Kerngeschäftslogik ist isoliert und kann dadurch mittels Unittests losgelöst von jeglichen
Abhängigkeiten getestet werden. Selbiges trifft auch auf die anderen Schichten zu.</li>
<li><strong>Flexibilität</strong>: Änderungen an externen Technologien oder Schnittstellen beschränken sich auf die Adapterschicht
und wirken sich minimal (im besten Fall gar nicht) auf die Kerngeschäftslogik aus.</li>
<li><strong>Wartbarkeit</strong>: Die Schichten kommunizieren über wohldefinierte Schnittstellen und ermöglichen es daher, bestimmte
Komponenten zu aktualisieren oder auszutauschen, ohne den Rest der Anwendung zu beeinträchtigen.</li>
<li><strong>Klare Projektstruktur</strong>: Die schichtweise Struktur lässt sich intuitiv auf die Organisation des Projekts übertragen.</li>
</ul>
<p>Mit diesem Verständnis können wir nun in die Umsetzung unseres Beispielprojekts starten.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="projektsetup">Projektsetup<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1#projektsetup" class="hash-link" aria-label="Direkter Link zur Projektsetup" title="Direkter Link zur Projektsetup">​</a></h2>
<p>Wir starten mit einem neu initialisierten <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a> Projekt basierend auf
<a href="https://openjdk.org/projects/jdk/21" target="_blank" rel="noopener noreferrer">Java 21</a>, welches
wir mit <a href="https://maven.apache.org/" target="_blank" rel="noopener noreferrer">Maven</a> (via <a href="https://maven.apache.org/wrapper" target="_blank" rel="noopener noreferrer">Maven Wrapper</a>) verwalten.
Darüber hinaus verwenden wir <a href="https://github.com/jhipster/prettier-java" target="_blank" rel="noopener noreferrer">Prettier Java</a> für eine einheitliche Formatierung,
<a href="https://www.mend.io/renovate" target="_blank" rel="noopener noreferrer">Renovate</a> für (semi-)automatisierte
Dependency-Updates, sowie <a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">GitHub Actions</a> für automatisierte CI-Builds.
Damit sieht unsere Anwendung zum Start folgendermaßen aus:</p>
<figure style="text-align:center"><img src="https://ricardo-schnur.github.io/assets/images/folder_structure_initialized_application-e77ccfba2dee7563b75b0f6a7a689bb8.png" alt="missing"><figcaption>Initialisierte Anwendung</figcaption></figure>
<p>Da wir zu diesem Zeitpunkt keinerlei Anwendungskonfiguration haben, ist die Datei <code>application.properties</code> leer und
unsere Einstiegsklasse startet bisher lediglich die Anwendung:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@SpringBootApplication</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalToDoListApplication</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">public</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">void</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">main</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token punctuation" style="color:#8dc891">[</span><span class="token punctuation" style="color:#8dc891">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token class-name" style="color:#FAC863">SpringApplication</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">run</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">HexagonalToDoListApplication</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Etwas interessanter ist unsere Mavenkonfiguration <code>pom.xml</code>. Hier binden wir schon einige Abhängigkeiten ein, die wir im
Laufe der Entwicklung verwenden wollen (die Abhängigkeit <code>spring-boot-starter-data-mongodb</code> lassen wir hier noch
auskommentiert, da ansonsten die Anwendung ohne zusätzliche Konfiguration nicht starten würde) und konfigurieren
Prettier. Die vollständige POM sowie das gesamte Projekt könnt ihr auf
<a href="https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post1" target="_blank" rel="noopener noreferrer">GitHub</a> finden.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="geplante-paketstruktur">Geplante Paketstruktur<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1#geplante-paketstruktur" class="hash-link" aria-label="Direkter Link zur Geplante Paketstruktur" title="Direkter Link zur Geplante Paketstruktur">​</a></h2>
<p>Wir orientieren uns hier an dem eingangs dargestellten Zwiebelmodell.
Dieses Modell können wir in unserem Java Code exakt in eine Paketstruktur übersetzen. Gehen wir davon aus, dass unsere
Anwendung im Basispaket <code>base</code> (für unsere konkrete Anwendung ersetze <code>base</code> durch <code>de.colenet.hexagonal.todo.list</code>)
liegt, so kann eine Paketstruktur folgendermaßen aussehen:</p>
<figure style="text-align:center"><img src="https://ricardo-schnur.github.io/assets/images/onion_packages-3235c6ed154b7a8aeb9e49f8da6d9122.png" alt="missing" height="500"><figcaption>Zwiebelmodell: Pakete</figcaption></figure>
<p>Zur Erinnerung: Für die Schichten der Zwiebel gilt hierbei, dass Zugriffe nur von außen nach innen gerichtet erlaubt
sind. Dabei dürfen aber Schichten übersprungen werden.</p>
<figure style="text-align:center"><img src="https://ricardo-schnur.github.io/assets/images/onion_call_hierarchy-008c14f1b7fa58863608b8bf90c81255.png" alt="missing" height="500"><figcaption>Zwiebelmodell: Aufrufe</figcaption></figure>
<p>Insbesondere ist es verschiedenen Adaptern <strong>nicht</strong> erlaubt, sich gegenseitig aufzurufen, auch wenn sie in derselben
Schicht dargestellt sind.</p>
<p>Genau diese Struktur und Zugriffsrechte wollen wir in unserem Projekt <em>automatisiert</em> sicherstellen. Dazu schreiben wir
im nächsten Abschnitt einen <em>Architektur-Unittest</em>, der, wie alle anderen Unittests, bei jedem CI-Build ausgeführt wird
und den Build bei einer Verletzung unserer Regeln fehlschlagen lässt.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="architektur-unittests">Architektur-Unittests<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1#architektur-unittests" class="hash-link" aria-label="Direkter Link zur Architektur-Unittests" title="Direkter Link zur Architektur-Unittests">​</a></h2>
<p>Hierzu verwenden wir <a href="https://www.archunit.org/" target="_blank" rel="noopener noreferrer">ArchUnit</a>, eine Java Bibliothek, die sich selbst beschreibt als:
<em>ArchUnit is a free, simple and extensible library for checking the architecture of your Java code using any plain Java
unit test framework.</em>
Konkret bedeutet das für uns, dass ArchUnit es uns erlaubt, normalen Java-Testcode zu schreiben und diese Tests dann
mit JUnit auszuführen. Eine simple Testklasse muss dazu einzig mit <code>@AnalyzeClasses</code> annotiert werden. Außerdem müssen
Testfälle mit der Annotation <code>@ArchTest</code> gekennzeichnet werden. Für mehr Details verweise ich gerne auf die
hervorragende <a href="https://www.archunit.org/userguide/html/000_Index.html" target="_blank" rel="noopener noreferrer">Dokumentation von ArchUnit</a>.</p>
<p>Unsere Testklasse wird damit folgendermaßen aussehen:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@AnalyzeClasses</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">packages </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"base"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> importOptions </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ImportOption</span><span class="token class-name punctuation" style="color:#8dc891">.</span><span class="token class-name" style="color:#FAC863">DoNotIncludeTests</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalArchitectureTest</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@ArchTest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ArchRule</span><span class="token plain"> onionArchitectureIsRespected </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// TODO</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Auffällig ist hierbei eventuell die Konfiguration <code>importOptions = ImportOption.DoNotIncludeTests.class</code>,
die Testklassen von unserem Architekturtest ausschließt. Dazu habe ich mich entschieden, um beim Testen etwas mehr
Flexibilität zu bewahren. Ihr könnt diese Option in eurer Anwendung natürlich außen vor lassen, um noch strikter zu
sein.</p>
<p>Um unseren Test zu vervollständigen, verwenden wir die von ArchUnit von Haus aus
bereitgestellte <a href="https://www.archunit.org/userguide/html/000_Index.html#_architectures" target="_blank" rel="noopener noreferrer">Onion Architecture Regel</a>.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@ArchTest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ArchRule</span><span class="token plain"> onionArchitectureIsRespected </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Architectures</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">onionArchitecture</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">domainModels</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"base.domain.model"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">domainServices</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"base.domain.service"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">applicationServices</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"base.application"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">adapter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"adapter1"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token string" style="color:#8dc891">"base.adapter.adapter1"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">adapter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"adapter2"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token string" style="color:#8dc891">"base.adapter.adapter2"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token comment" style="color:#999999">// ... more adapters</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ensureAllClassesAreContainedInArchitectureIgnoring</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"base"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wir ignorieren der Einfachheit halber alle Klassen, die direkt in unserem Basispaket liegen, da sich dort aus
technischen Gründen unsere mit <code>@SpringBootApplication</code> annotierte Einstiegsklasse befindet. In einer Produktivanwendung
könnten wir hier mittels eines <code>DescribedPredicate</code> genauer sein und nur diese eine Einstiegsklasse vom
Test ausschließen.</p>
<p>Für unseren Fall müssen wir nun natürlich das korrekte Basispaket verwenden und konkrete Adapter definieren.
Hier wollen wir für den Moment mit den Adaptern <code>cache</code> und <code>rest</code> starten. Außerdem setzen wir temporär die
Option <code>withOptionalLayers(true)</code> um leere Schichten zu erlauben.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#282c34;--prism-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#282c34;color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#ffffff"><span class="token annotation punctuation" style="color:#8dc891">@AnalyzeClasses</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token plain">packages </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalArchitectureTest</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token constant" style="color:#5a9bcf">BASE_PACKAGE</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> importOptions </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ImportOption</span><span class="token class-name punctuation" style="color:#8dc891">.</span><span class="token class-name" style="color:#FAC863">DoNotIncludeTests</span><span class="token punctuation" style="color:#8dc891">.</span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token keyword" style="color:#c5a5c5">class</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">HexagonalArchitectureTest</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">BASE_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"de.colenet.hexagonal.todo.list"</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#8dc891">@ArchTest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">final</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">ArchRule</span><span class="token plain"> onionArchitectureIsRespected </span><span class="token operator" style="color:#d7deea">=</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">Architectures</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">onionArchitecture</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">domainModels</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token function" style="color:#79b6f2">getPackageIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"domain.model"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">domainServices</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token function" style="color:#79b6f2">getPackageIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"domain.service"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">applicationServices</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token function" style="color:#79b6f2">getPackageIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"application"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">adapter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"cache"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAdapterIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"cache"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">adapter</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"rest"</span><span class="token punctuation" style="color:#8dc891">,</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAdapterIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"rest"</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">withOptionalLayers</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token boolean" style="color:#ff8b50">true</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token comment" style="color:#999999">// TODO Remove this as soon as our layers are filled</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">            </span><span class="token punctuation" style="color:#8dc891">.</span><span class="token function" style="color:#79b6f2">ensureAllClassesAreContainedInArchitectureIgnoring</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token constant" style="color:#5a9bcf">BASE_PACKAGE</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getAdapterIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getPackageIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token string" style="color:#8dc891">"adapter."</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> name</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token keyword" style="color:#c5a5c5">private</span><span class="token plain"> </span><span class="token keyword" style="color:#c5a5c5">static</span><span class="token plain"> </span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> </span><span class="token function" style="color:#79b6f2">getPackageIdentifier</span><span class="token punctuation" style="color:#8dc891">(</span><span class="token class-name" style="color:#FAC863">String</span><span class="token plain"> subpackage</span><span class="token punctuation" style="color:#8dc891">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8dc891">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">        </span><span class="token keyword" style="color:#c5a5c5">return</span><span class="token plain"> </span><span class="token constant" style="color:#5a9bcf">BASE_PACKAGE</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">"."</span><span class="token plain"> </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> subpackage </span><span class="token operator" style="color:#d7deea">+</span><span class="token plain"> </span><span class="token string" style="color:#8dc891">".."</span><span class="token punctuation" style="color:#8dc891">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain">    </span><span class="token punctuation" style="color:#8dc891">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#ffffff"><span class="token plain"></span><span class="token punctuation" style="color:#8dc891">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ausblick">Ausblick<a href="https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1#ausblick" class="hash-link" aria-label="Direkter Link zur Ausblick" title="Direkter Link zur Ausblick">​</a></h2>
<p>Im nächsten Teil dieser Serie füllen wir unsere Anwendung mit erster Funktionalität.
Dazu werden wir einen Service aufsetzen, der es uns erlaubt, Tasks anzulegen, auszulesen und als abgeschlossen zu markieren.
Die Daten werden wir für den Anfang in einem In-Memory Cache halten.
In einem späteren Beitrag werden wir diesen dann durch eine echte Datenbank ersetzen.</p>]]></content:encoded>
            <category>Domain-driven Design</category>
            <category>Hexagonale Architektur</category>
            <category>Softwarearchitektur</category>
            <category>Softwareentwicklung</category>
        </item>
    </channel>
</rss>