"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[527],{3635:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=i(4848),t=i(8453);const s={slug:"hexagonal-architecture-java-spring-boot-part-2",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 2: Modellierung, Kernlogik und In-Memory Cache",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:new Date("2023-11-09T00:00:00.000Z")},a=void 0,l={permalink:"/hexagonal-architecture-java-spring-boot-part-2",source:"@site/blog/hexagonal-architecture/part2/part2.mdx",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 2: Modellierung, Kernlogik und In-Memory Cache",description:"banner",date:"2023-11-09T00:00:00.000Z",formattedDate:"9. November 2023",tags:[{label:"Domain-driven Design",permalink:"/tags/domain-driven-design"},{label:"Hexagonale Architektur",permalink:"/tags/hexagonale-architektur"},{label:"Softwarearchitektur",permalink:"/tags/softwarearchitektur"},{label:"Softwareentwicklung",permalink:"/tags/softwareentwicklung"}],readingTime:8.14,hasTruncateMarker:!0,authors:[{name:"Ricardo Schnur",title:"Software Developer @ Colenet GmbH",url:"https://github.com/ricardo-schnur",imageURL:"img/profile.png",key:"ricardo"}],frontMatter:{slug:"hexagonal-architecture-java-spring-boot-part-2",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 2: Modellierung, Kernlogik und In-Memory Cache",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:"2023-11-09T00:00:00.000Z"},unlisted:!1,prevItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 3: REST-Schnittstelle mit Antikorruptionsschicht",permalink:"/hexagonal-architecture-java-spring-boot-part-3"},nextItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 1: Projektbeschreibung, Setup und automatische Architekturtests",permalink:"/hexagonal-architecture-java-spring-boot-part-1"}},d={authorsImageUrls:[void 0]},o=[{value:"Das Vorhaben: Hexagonale Architektur in der Praxis verstehen",id:"das-vorhaben-hexagonale-architektur-in-der-praxis-verstehen",level:2},{value:"Das Dom\xe4nenmodell",id:"das-dom\xe4nenmodell",level:2},{value:"Die Kernfunktionalit\xe4t: <em>Domain Services</em>",id:"die-kernfunktionalit\xe4t-domain-services",level:2},{value:"In-Memory Cache",id:"in-memory-cache",level:2},{value:"Ausblick",id:"ausblick",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{Head:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"banner",src:i(7188).A+"",width:"1031",height:"688"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Um zu verstehen, wie hexagonale Architektur die Art und Weise, Software zu entwickeln ver\xe4ndert und was dabei\ndie Vorteile sind, f\xfchrt Ricardo uns Schritt f\xfcr Schritt durch die Entwicklung einer To-Do-Listen-Anwendung.\nIn dieser Folge startet nun die eigentliche Entwicklung mit der Modellierung der Dom\xe4ne, der Kernlogik der\nAnwendung sowie der Datenhaltung in einem Cache."}),"\n"]}),"\n","\n",(0,r.jsx)(s,{children:(0,r.jsx)("link",{rel:"canonical",href:"https://www.colenet.de/blog/development/hexagonale-architektur-modellierung-kernlogik-und-in-memory-cache/"})}),"\n",(0,r.jsx)(n.h2,{id:"das-vorhaben-hexagonale-architektur-in-der-praxis-verstehen",children:"Das Vorhaben: Hexagonale Architektur in der Praxis verstehen"}),"\n",(0,r.jsxs)(n.p,{children:["Diese Artikel-Reihe ist der hexagonalen Architektur gewidmet: Wir m\xf6chten ihre Grundprinzipien verstehen und dazu in der\nPraxis erleben. Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung praktisch\nrealisieren l\xe4sst. Dazu werden wir Schritt f\xfcr Schritt eine kleine ",(0,r.jsx)(n.strong,{children:"To-do-Listen-Anwendung"})," entwickeln, die es\nerm\xf6glichen\nsoll, Tasks anzulegen, angelegte Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird \xfcber eine\nREST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar entweder In-Memory oder persistent in einer echten\nMongoDB verwaltet."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1",children:"Im ersten Teil dieser Serie"})," haben wir\nein frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert. Wir haben uns\n\xfcberlegt, wie wir uns die Architektur der Anwendung und ihre Umsetzung vorstellen und diese Vorstellung mittels ArchUnit\nin einem automatisierten Architekturtest festgehalten."]}),"\n",(0,r.jsx)(n.p,{children:"Nun wollen wir mit der tats\xe4chlichen Entwicklung starten und uns in diesem Teil der Serie mit der Modellierung der\nDom\xe4ne, der Kernlogik der Anwendung sowie dem Bereitstellen einer Schnittstelle \u2013 um die Anwendung auch wirklich\nverwenden zu k\xf6nnen \u2013 befassen."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Den Code findet ihr auch zu diesem Teil zum Nachvollziehen\nauf ",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2",children:"GitHub"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"das-dom\xe4nenmodell",children:"Das Dom\xe4nenmodell"}),"\n",(0,r.jsxs)(n.p,{children:["F\xfcr unsere To-do-Listen-Anwendung soll es ein einziges Dom\xe4nenobjekt geben, n\xe4mlich einen ",(0,r.jsx)(n.em,{children:"Task"}),". Dieser soll ganz\ngrundlegende Informationen enthalten: Eine ",(0,r.jsx)(n.em,{children:"Beschreibung"}),", den ",(0,r.jsx)(n.em,{children:"Zustand"}),", ob der Task noch ",(0,r.jsx)(n.em,{children:"offen"}),", oder er bereits\n",(0,r.jsx)(n.em,{children:"erledigt"}),"\nist und, falls erledigt, den ",(0,r.jsx)(n.em,{children:"Abschlusszeitpunkt"}),". Au\xdferdem wollen wir den Objekten noch eine ID zuweisen, um sie\neindeutig identifizieren zu k\xf6nnen (und zum Beispiel zwei offene Tasks mit gleicher Beschreibung voneinander\nunterscheiden zu k\xf6nnen)."]}),"\n",(0,r.jsxs)(n.p,{children:["Bei der Realisierung dieses Modells im Code wollen wir uns dabei so genau wie m\xf6glich an den Dom\xe4nenanforderungen\norientieren. Insbesondere wollen wir uns hier nicht von infrastrukturellen/technischen Gedanken wie ",(0,r.jsx)(n.em,{children:"L\xe4sst sich das\nModellobjekt serialisieren?, Ist das Design geeignet f\xfcr eine relationale Datenbank?"})," oder \xc4hnlichen beeinflussen\nlassen.\nF\xfcr solche Belange werden wir stattdessen sp\xe4ter dedizierte, optimierte Datenstrukturen anlegen und im entsprechenden\nKontext (lokal!) verwenden. Im Herzen unserer Anwendung wollen wir hingegen so nahe an der Fachdom\xe4ne sein wie m\xf6glich."]}),"\n",(0,r.jsxs)(n.p,{children:["Wir wollen also ",(0,r.jsx)(n.strong,{children:"einerseits die Typen unserer Eigenschaften so spezifisch und aussagekr\xe4ftig wie m\xf6glich w\xe4hlen"})," \u2013\netwa\nsoll unsere ID vom Typ UUID und nicht etwa nur ein String oder int sein \u2013 und ",(0,r.jsxs)(n.strong,{children:["andererseits wollen wir es unm\xf6glich\n(bzw. in der Praxis zumindest m\xf6glichst schwierig) machen, in der Dom\xe4ne ",(0,r.jsx)(n.em,{children:"unm\xf6gliche Zust\xe4nde"})," \xfcberhaupt darstellen\nzu k\xf6nnen"]})," (und damit Fehler kategorisch ausschlie\xdfen)."]}),"\n",(0,r.jsx)(n.p,{children:"Der zweite Punkt bedeutet f\xfcr uns an dieser Stelle konkret, dass wir nicht etwa ein einziges Task-Objekt in der Form"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"enum TaskState {\n    OPEN, CLOSED\n}\n\nrecord Task(UUID id, String description, TaskState state, LocalDateTime completionTime) {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"darstellen m\xf6chten, denn sonst w\xfcrde uns nichts davon abhalten, einen offenen Task mit gesetzter Abschlusszeit\nanzulegen."}),"\n",(0,r.jsxs)(n.p,{children:["Stattdessen wollen wir strikt zwischen offenen und geschlossenen Tasks unterscheiden und nur geschlossenen Tasks\ndie Eigenschaft ",(0,r.jsx)(n.code,{children:"completionTime"})," zuzuordnen. In der Theorie sprechen wir hierbei von einem sogenannten ",(0,r.jsx)(n.strong,{children:"Summentyp"}),",\nwohingegen die ungew\xfcnschte Darstellung oben einen ",(0,r.jsx)(n.strong,{children:"Produkttyp"})," darstellt. Zur Umsetzung k\xf6nnen wir dazu das\nk\xfcrzlich mit Java 17 eingef\xfchrte ",(0,r.jsx)(n.code,{children:"sealed"})," Schl\xfcsselwort verwenden:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public sealed interface Task {\n    UUID id();\n\n    String description();\n\n    record OpenTask(UUID id, String description) implements Task {}\n\n    record CompletedTask(UUID id, String description, LocalDateTime completionTime) implements Task {}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dieses Interface legen wir dabei entsprechend unserer \xdcberlegungen im vorangegangen Post im Paket\n",(0,r.jsx)(n.code,{children:"de.colenet.hexagonal.todo.list.domain.model.task"})," ab. Durch das Versiegeln des Interfaces ",(0,r.jsx)(n.code,{children:"Task"})," stellen wir sicher,\ndass dieses ausschlie\xdflich von den beiden im Rumpf\ndefinierten Klassen ",(0,r.jsx)(n.code,{children:"OpenTask"})," und ",(0,r.jsx)(n.code,{children:"CompletedTask"})," implementiert werden kann.\nDass wir die geteilten Eigenschaften ",(0,r.jsx)(n.code,{children:"id"})," und ",(0,r.jsx)(n.code,{children:"description"})," zus\xe4tzlich zu den Klasseneigenschaften auch noch im\nInterface direkt deklarieren, ist strikt optional und hat rein ergonomische Gr\xfcnde: An vielen Stellen der Anwendung\nwird es uns nicht interessieren, ob ein konkreter Task noch offen oder schon abgeschlossen ist, und hierdurch ersparen\nwir uns an diesen Stellen Fallunterscheidungen."]}),"\n",(0,r.jsxs)(n.p,{children:["Wollten wir in unserer Modellierung noch genauer sein, so k\xf6nnten wir uns f\xfcr unsere ",(0,r.jsx)(n.code,{children:"description"})," auch noch einen\nDatentyp ",(0,r.jsx)(n.code,{children:"NonEmptyString"})," mit entsprechender Absicherung der geforderten ",(0,r.jsx)(n.em,{children:"nicht-leer"})," Bedingung im Konstruktor anlegen,\nder Einfachheit halber sehen wir davon an dieser Stelle aber ab."]}),"\n",(0,r.jsx)(n.p,{children:"Gewappnet mit dieser Darstellung unseres Dom\xe4nenmodells wollen wir uns nun der Kernfunktionalit\xe4t unserer Anwendung\nzuwenden: dem Erzeugen, Abschlie\xdfen und Ausgeben von solchen Tasks."}),"\n",(0,r.jsx)(n.p,{children:"In einem kommenden Teil der Serie werden wir uns au\xdferdem anschauen, wie wir dieses Modell erweitern k\xf6nnen, und welche\nAuswirkungen das auf unsere (bis dahin schon funktionale) Anwendung haben wird."}),"\n",(0,r.jsxs)(n.h2,{id:"die-kernfunktionalit\xe4t-domain-services",children:["Die Kernfunktionalit\xe4t: ",(0,r.jsx)(n.em,{children:"Domain Services"})]}),"\n",(0,r.jsxs)(n.p,{children:["Nun wollen wir uns die gew\xfcnschte Funktionalit\xe4t auf ",(0,r.jsx)(n.em,{children:"fachlicher"}),' Ebene anschauen. Dabei werden wir schnell bemerken,\ndass\nwir uns um die "eigentliche" Arbeit an dieser Stelle nur wenige Gedanken machen m\xfcssen und diese stattdessen einfach in\ndie Zukunft verschieben k\xf6nnen (n\xe4mlich in den n\xe4chsten Abschnitt, in dem wir uns mit der Datenhaltung in einem Cache\nbefassen werden).']}),"\n",(0,r.jsx)(n.p,{children:"Im Grunde genommen wollen wir drei Grundfunktionalit\xe4ten:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Wir wollen einen neuen Task anlegen k\xf6nnen (der im Zustand ",(0,r.jsx)(n.em,{children:"offen"})," sein soll)."]}),"\n",(0,r.jsx)(n.li,{children:"Wir wollen alle existierenden Tasks abrufen k\xf6nnen."}),"\n",(0,r.jsx)(n.li,{children:"Wir wollen den Zustand eines Tasks umschalten k\xf6nnen."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Das f\xfchrt uns zu folgenden Methodensignaturen, die wir mit Leben f\xfcllen wollen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Task createTask(String description);\n\nList<Task> getAllTasks();\n\nOptional<Task> toggleCompletionState(UUID id);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Hierbei machen wir mit dem R\xfcckgabetypen ",(0,r.jsx)(n.code,{children:"Optional<Task>"})," in der letzten Methode deutlich, dass diese fehlschlagen kann,\nwenn kein Task mit der gegebenen ID existiert."]}),"\n",(0,r.jsxs)(n.p,{children:["Wie bereits angedeutet, wollen wir einen Gro\xdfteil der Implementierung in unsere Persistenzschicht\n(oder genauer, den Persistenz",(0,r.jsx)(n.em,{children:"adapter"}),") auslagern. Im Sinne unserer hexagonalen Architektur, die auch als ",(0,r.jsx)(n.em,{children:"Ports und\nAdapter"})," bekannt ist, legen wir uns dazu einen Port (In der Form eines Interfaces) an, in dem wir uns ",(0,r.jsx)(n.em,{children:"w\xfcnschen"}),", was\nein eventueller Persistenzadapter doch bitte f\xfcr uns erledigen soll:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package de.colenet.hexagonal.todo.list.domain.service.task;\n\nimport ...; // Omitted for clarity\n\npublic interface TaskRepository {\n    Task save(Task task);\n\n    Optional<Task> find(UUID id);\n\n    List<Task> getAll();\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Solche Ports z\xe4hlen dabei zur Gesch\xe4ftslogik und liegen damit auch in unserem ",(0,r.jsx)(n.em,{children:"Domain Services"}),"-Paket.\nDie Ausimplementierungen der Ports befinden sich hingegen in den entsprechenden Adaptern."]}),"\n",(0,r.jsx)(n.p,{children:"Mithilfe dieses Ports k\xf6nnen wir nun unsere eigentliche Serviceklasse anlegen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package de.colenet.hexagonal.todo.list.domain.service.task;\n\nimport ...; // Omitted for clarity\n\n@Service\npublic class TaskService {\n\n    private final TaskRepository taskRepository;\n\n    public TaskService(TaskRepository taskRepository) {\n        this.taskRepository = taskRepository;\n    }\n\n    public Task createTask(String description) {\n        // TODO\n    }\n\n    public List<Task> getAllTasks() {\n        // TODO\n    }\n\n    public Optional<Task> toggleCompletionState(UUID id) {\n        // TODO\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Die Ausimplementierung der drei Methoden gestaltet sich jetzt sehr einfach. Zum Erzeugen eines Tasks wollen wir einfach\neinen neuen, offenen Task mit zuf\xe4llig generierter ID \xfcber den Port anlegen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public Task createTask(String description) {\n    return taskRepository.save(new OpenTask(UUID.randomUUID(), description));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Und das Laden k\xf6nnen wir vollst\xe4ndig an den Port delegieren:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public List<Task> getAllTasks() {\n    return taskRepository.getAll();\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Um den Zustand von Tasks abzu\xe4ndern, nutzen wir das mit Java 21 neu eingef\xfchrte\nFeature ",(0,r.jsx)(n.a,{href:"https://openjdk.org/jeps/433",children:"Pattern Matching for switch"})," in Kombination mit ",(0,r.jsx)(n.em,{children:"Switch Expressions"}),".\nAu\xdferdem nutzen wir auch hier wieder den Port:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public Optional<Task> toggleCompletionState(UUID id) {\n    return taskRepository.find(id).map(this::withToggledCompletionState).map(taskRepository::save);\n}\n\nprivate Task withToggledCompletionState(Task task) {\n    return switch (task) {\n        case OpenTask t -> new CompletedTask(t.id(), t.description(), LocalDateTime.now(clock));\n        case CompletedTask t -> new OpenTask(t.id(), t.description());\n    };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Hierbei verwenden wir ein ",(0,r.jsx)(n.code,{children:"Clock clock"})," Objekt, welches wir analog zum Repository \xfcber den Konstruktor injizieren,\num unseren Code testbar zu halten. Die entsprechende Konfiguration daf\xfcr legen wir in einem technischen Modul an:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package de.colenet.hexagonal.todo.list.domain.service.technical.clock;\n\nimport ...; // Omitted for clarity\n\n@Configuration\nclass ClockConfiguration {\n\n    @Bean\n    public Clock clock() {\n        return Clock.systemDefaultZone();\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Testbarkeit ist \xfcbrigens einer der gro\xdfen Vorteile, die uns die gew\xe4hlte Architektur liefert."})," Obwohl wir noch keine\nImplementierung f\xfcr den Port haben, k\xf6nnen wir an dieser Stelle bereits Unittests f\xfcr unseren Service schreiben, indem\nwir den Port mocken. Das f\xfchrt auch automatisch dazu, dass wir uns in diesen Tests rein auf die Fachlichkeit\nkonzentrieren. Das Zusammenspiel der Komponenten werden wir sp\xe4ter mittels Integrations- und End-To-End-Tests\n\xfcberpr\xfcfen. Da das Testen nicht der Fokus dieser Serie sein soll, werde ich hier nicht tiefer auf die Unittests\neingehen. Gerne seid ihr aber dazu eingeladen, euch im\nbegleitenden ",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2",children:"GitHub Repository"})," die\nKlasse ",(0,r.jsx)(n.code,{children:"TaskServiceTest"})," anzuschauen."]}),"\n",(0,r.jsxs)(n.p,{children:["Damit steht der Kern unserer Anwendung bereits! Solltet ihr die Anwendung im aktuellen Zustand starten wollen,\nwerdet ihr aber noch keinen Erfolg haben, da derzeit keine Implementierung f\xfcr ",(0,r.jsx)(n.code,{children:"TaskRepository"})," existiert.\nIhr k\xf6nnt euch nat\xfcrlich f\xfcr den Moment eine Dummy-Implementierung anlegen - oder ihr wartet, bis wir uns gleich\ndem Cache-Adapter zuwenden."]}),"\n",(0,r.jsx)(n.h2,{id:"in-memory-cache",children:"In-Memory Cache"}),"\n",(0,r.jsxs)(n.p,{children:["Zum Abschluss wollen wir eine konkrete Implementierung f\xfcr unseren Port ",(0,r.jsx)(n.code,{children:"TaskRepository"})," in Form eines\nsimplen Caches anlegen. Wie bereits in unserem Architekturtest verankert, wollen wir diese Implementierung im\nAdapter-Paket ",(0,r.jsx)(n.code,{children:"de.colenet.hexagonal.todo.list.adapter.cache"})," ablegen. Wir werden an dieser Stelle von jeglichen\nOptimierungen Abstand halten und stattdessen zu Demonstrationszwecken m\xf6glichst einfachen, wenn auch nicht unbedingt\nproduktionsreifen, Code schreiben. Daher entscheiden wir uns dazu, den Adapter als simplen Wrapper um eine ",(0,r.jsx)(n.code,{children:"Map"}),"\nzu realisieren. Die komplette Implementierung l\xe4sst sich damit direkt niederschreiben:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Repository\nclass TaskCache implements TaskRepository {\n\n    // LinkedHashMap keeps insertion order\n    private final Map<UUID, Task> tasks = new LinkedHashMap<>();\n\n    @Override\n    public Task save(Task task) {\n        tasks.put(task.id(), task);\n        return task;\n    }\n\n    @Override\n    public Optional<Task> find(UUID id) {\n        return Optional.ofNullable(tasks.get(id));\n    }\n\n    @Override\n    public List<Task> getAll() {\n        return List.copyOf(tasks.values());\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Auch hier m\xf6chte ich wieder anmerken, dass wir die Implementierung losgel\xf6st von jeglicher Abh\xe4ngigkeit ganz einfach\nUnit-testen k\xf6nnen und auf ",(0,r.jsx)(n.code,{children:"TaskServiceTest"})," im\n",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post2",children:"GitHub Repository"})," hinweisen."]}),"\n",(0,r.jsx)(n.h2,{id:"ausblick",children:"Ausblick"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Wir haben bisher eine simple, aber schon funktionale und lauff\xe4hige Anwendung entwickelt."})," Um diese jedoch wirklich\nnutzen zu k\xf6nnen, fehlt uns noch eine Steuerungsm\xf6glichkeit. Daher werden wir die Anwendung im n\xe4chsten Teil der\nReihe um eine REST-Schnittstelle erweitern, die uns dann die tats\xe4chliche Nutzung erm\xf6glicht."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},7188:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/banner-42d0f311365c82066b675100c3744901.webp"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);