"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[384],{1951:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>g});var r=i(4848),t=i(8453);const s=i.p+"assets/images/folder_structure_initialized_application-e77ccfba2dee7563b75b0f6a7a689bb8.png",a=i.p+"assets/images/onion_call_hierarchy-008c14f1b7fa58863608b8bf90c81255.png",l=i.p+"assets/images/onion_layers-d54a8579bef3ea14b862f79b6e4110dd.png",d=i.p+"assets/images/onion_packages-3235c6ed154b7a8aeb9e49f8da6d9122.png",c={slug:"hexagonal-architecture-java-spring-boot-part-1",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 1: Projektbeschreibung, Setup und automatische Architekturtests",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:new Date("2023-10-10T00:00:00.000Z")},h=void 0,o={permalink:"/hexagonal-architecture-java-spring-boot-part-1",source:"@site/blog/hexagonal-architecture/part1/part1.mdx",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 1: Projektbeschreibung, Setup und automatische Architekturtests",description:"banner",date:"2023-10-10T00:00:00.000Z",formattedDate:"10. Oktober 2023",tags:[{label:"Domain-driven Design",permalink:"/tags/domain-driven-design"},{label:"Hexagonale Architektur",permalink:"/tags/hexagonale-architektur"},{label:"Softwarearchitektur",permalink:"/tags/softwarearchitektur"},{label:"Softwareentwicklung",permalink:"/tags/softwareentwicklung"}],readingTime:6.815,hasTruncateMarker:!0,authors:[{name:"Ricardo Schnur",title:"Software Developer @ Colenet GmbH",url:"https://github.com/ricardo-schnur",imageURL:"img/profile.png",key:"ricardo"}],frontMatter:{slug:"hexagonal-architecture-java-spring-boot-part-1",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 1: Projektbeschreibung, Setup und automatische Architekturtests",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:"2023-10-10T00:00:00.000Z"},unlisted:!1,prevItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 2: Modellierung, Kernlogik und In-Memory Cache",permalink:"/hexagonal-architecture-java-spring-boot-part-2"}},u={authorsImageUrls:[void 0]},g=[{value:"Hexagonale Architektur - was ist das \xfcberhaupt?",id:"hexagonale-architektur---was-ist-das-\xfcberhaupt",level:2},{value:"Projektsetup",id:"projektsetup",level:2},{value:"Geplante Paketstruktur",id:"geplante-paketstruktur",level:2},{value:"Architektur-Unittests",id:"architektur-unittests",level:2},{value:"Ausblick",id:"ausblick",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Head:c}=n;return c||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"banner",src:i(5099).A+"",width:"1031",height:"688"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"In der Softwareentwicklung gibt es eine Architektur, die seit einigen Jahren immer mehr an Bedeutung gewinnt \u2013\ndie hexagonale Architektur. Ricardo erkl\xe4rt diese Architektur und ihre Grundprinzipien anschaulich und f\xfchrt uns\nin 5 Teilen Schritt f\xfcr Schritt durch die konkrete Anwendung."}),"\n"]}),"\n","\n",(0,r.jsx)(c,{children:(0,r.jsx)("link",{rel:"canonical",href:"https://www.colenet.de/blog/development/hexagonale-architektur-in-der-praxis-umsetzung-in-einem-java-spring-boot-projekt-teil-1/"})}),"\n","\n","\n",(0,r.jsxs)(n.p,{children:["In der Softwareentwicklung gibt es eine Architektur, die seit einigen Jahren immer mehr an Bedeutung gewinnt \u2013 ",(0,r.jsx)(n.strong,{children:"die hexagonale Architektur"}),".\nIch hatte mehrfach die Gelegenheit, diese Architektur in Kundenprojekten zu realisieren und konnte dabei direkt miterleben, wie sie die Art und Weise,\nwie wir Software entwickeln, ver\xe4ndert."]}),"\n",(0,r.jsxs)(n.p,{children:["In dieser Serie werden wir uns diese Architektur genauer anschauen und ihre Grundprinzipien in der Praxis erleben.\nIhr werdet feststellen, ",(0,r.jsx)(n.strong,{children:"dass sie die Anforderungen unserer Benutzer in den Vordergrund stellt und uns gleichzeitig erlaubt,\nden Code auf eine Weise organisieren zu k\xf6nnen, die sowohl robust als auch flexibel ist"}),". Damit tr\xe4gt sie erheblich zur Wartbarkeit,\nErweiterbarkeit und Testbarkeit unserer Anwendungen bei."]}),"\n",(0,r.jsxs)(n.p,{children:["Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung praktisch realisieren l\xe4sst.\nDazu werden wir Schritt f\xfcr Schritt eine kleine ",(0,r.jsx)(n.strong,{children:"To-do-Listen-Anwendung"})," entwickeln, die es erm\xf6glichen soll, Tasks anzulegen,\nTasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird \xfcber eine REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar\nentweder In-Memory oder persistent in einer echten MongoDB verwaltet."]}),"\n",(0,r.jsx)(n.p,{children:"Zum Einstieg m\xf6chte ich kurz darauf eingehen, was gemeint ist, wenn wir von einer hexagonalen Architektur sprechen."}),"\n",(0,r.jsx)(n.h2,{id:"hexagonale-architektur---was-ist-das-\xfcberhaupt",children:"Hexagonale Architektur - was ist das \xfcberhaupt?"}),"\n",(0,r.jsxs)(n.p,{children:["Es handelt sich hierbei um einen Architekturstil, der unter vielen Namen bekannt ist: ",(0,r.jsx)(n.em,{children:"hexagonale Architektur"}),",\n",(0,r.jsx)(n.em,{children:"Ports und Adapter"}),", ",(0,r.jsx)(n.em,{children:"Zwiebelarchitektur (Onion Architecture)"}),", ",(0,r.jsx)(n.em,{children:"Clean Architecture"})]}),"\n",(0,r.jsxs)(n.p,{children:["All diese Architekturstile unterscheiden sich im Detail, basieren aber auf denselben Kernideen und Prinzipien.\nAuf die feinen Unterschiede m\xf6chte ich an dieser Stelle nicht genauer eingehen, sondern verweise auf die zahlreichen,\nonline verf\xfcgbaren Ressourcen zu diesem Thema, wie etwa den hervorragenden \xdcbersichtsartikel\nvon ",(0,r.jsx)(n.a,{href:"https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/",children:"Herberto Gra\xe7a (englisch)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In dieser Serie wollen wir die Unterschiede unterschlagen und die Begriffe ",(0,r.jsx)(n.em,{children:"hexagonale Architektur"})," und\n",(0,r.jsx)(n.em,{children:"Zwiebelarchitektur"})," synonym verwenden. Wir verstehen darunter eine Anwendungsarchitektur, die den Code in\nkonzentrischen Schichten (daher der Name ",(0,r.jsx)(n.em,{children:"Zwiebel"}),") organisiert. Hierbei sind nur Abh\xe4ngigkeiten von au\xdfen nach innen\ngestattet (es d\xfcrfen dabei aber Schichten \xfcbersprungen werden), sodass insbesondere die innerste Schicht keinerlei\nAbh\xe4ngigkeiten auf den Rest des Codes haben darf. Genauer unterteilen wir unsere Anwendung in die folgenden drei,\nvon innen nach au\xdfen angeordneten Schichten:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dom\xe4nenschicht"}),": Beinhaltet die Dom\xe4nenmodelle und die Kerngesch\xe4ftslogik."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Anwendungsschicht"}),": Ist verantwortlich f\xfcr anwendungsinterne Aufgaben, die nicht der Kernlogik zuzuordnen\nsind. Hierzu geh\xf6ren etwa die Ausf\xfchrung von geplanten Aufgaben, Transaktionssteuerung oder auch das\nZusammenf\xfchren mehrerer Teile der Kernlogik zu einem Workflow."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adapterschicht"}),": Handhabt jegliche Interaktion der Anwendung mit der Au\xdfenwelt, wie etwa die Bereitstellung von\nAPI-Endpunkten, Durchf\xfchrung von Datenbankzugriffen oder die Kommunikation mit anderen Schnittstellen."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Die Dom\xe4nenschicht k\xf6nnen wir dabei noch weiter in zwei Teilschichten zerlegen: Modelle (innen) und Logik (au\xdfen).\nAu\xdferdem kann die Adapterschicht aus mehreren, voneinander unabh\xe4ngigen, Adaptern bestehen (n\xe4mlich ein Adapter je\nAnlass). Das Modell l\xe4sst sich also folgenderma\xdfen visualisieren:"}),"\n",(0,r.jsxs)("figure",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:l,alt:"missing",height:500}),(0,r.jsx)("figcaption",{children:"Zwiebelmodell: Schichten"})]}),"\n",(0,r.jsx)(n.p,{children:"Die Zwiebelarchitektur liefert eine Reihe von Vorteilen, etwa:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dom\xe4nenzentriertes Design"}),": Die Kerngesch\xe4ftslogik wird gegen\xfcber von Infrastrukturangelegenheiten klar in den\nFokus gesetzt."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testbarkeit"}),": Die Kerngesch\xe4ftslogik ist isoliert und kann dadurch mittels Unittests losgel\xf6st von jeglichen\nAbh\xe4ngigkeiten getestet werden. Selbiges trifft auch auf die anderen Schichten zu."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibilit\xe4t"}),": \xc4nderungen an externen Technologien oder Schnittstellen beschr\xe4nken sich auf die Adapterschicht\nund wirken sich minimal (im besten Fall gar nicht) auf die Kerngesch\xe4ftslogik aus."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wartbarkeit"}),": Die Schichten kommunizieren \xfcber wohldefinierte Schnittstellen und erm\xf6glichen es daher, bestimmte\nKomponenten zu aktualisieren oder auszutauschen, ohne den Rest der Anwendung zu beeintr\xe4chtigen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Klare Projektstruktur"}),": Die schichtweise Struktur l\xe4sst sich intuitiv auf die Organisation des Projekts \xfcbertragen."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Mit diesem Verst\xe4ndnis k\xf6nnen wir nun in die Umsetzung unseres Beispielprojekts starten."}),"\n",(0,r.jsx)(n.h2,{id:"projektsetup",children:"Projektsetup"}),"\n",(0,r.jsxs)(n.p,{children:["Wir starten mit einem neu initialisierten ",(0,r.jsx)(n.a,{href:"https://spring.io/projects/spring-boot",children:"Spring Boot"})," Projekt basierend auf\n",(0,r.jsx)(n.a,{href:"https://openjdk.org/projects/jdk/21",children:"Java 21"}),", welches\nwir mit ",(0,r.jsx)(n.a,{href:"https://maven.apache.org/",children:"Maven"})," (via ",(0,r.jsx)(n.a,{href:"https://maven.apache.org/wrapper",children:"Maven Wrapper"}),") verwalten.\nDar\xfcber hinaus verwenden wir ",(0,r.jsx)(n.a,{href:"https://github.com/jhipster/prettier-java",children:"Prettier Java"})," f\xfcr eine einheitliche Formatierung,\n",(0,r.jsx)(n.a,{href:"https://www.mend.io/renovate",children:"Renovate"})," f\xfcr (semi-)automatisierte\nDependency-Updates, sowie ",(0,r.jsx)(n.a,{href:"https://github.com/features/actions",children:"GitHub Actions"})," f\xfcr automatisierte CI-Builds.\nDamit sieht unsere Anwendung zum Start folgenderma\xdfen aus:"]}),"\n",(0,r.jsxs)("figure",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:s,alt:"missing"}),(0,r.jsx)("figcaption",{children:"Initialisierte Anwendung"})]}),"\n",(0,r.jsxs)(n.p,{children:["Da wir zu diesem Zeitpunkt keinerlei Anwendungskonfiguration haben, ist die Datei ",(0,r.jsx)(n.code,{children:"application.properties"})," leer und\nunsere Einstiegsklasse startet bisher lediglich die Anwendung:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\nclass HexagonalToDoListApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HexagonalToDoListApplication.class, args);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Etwas interessanter ist unsere Mavenkonfiguration ",(0,r.jsx)(n.code,{children:"pom.xml"}),". Hier binden wir schon einige Abh\xe4ngigkeiten ein, die wir im\nLaufe der Entwicklung verwenden wollen (die Abh\xe4ngigkeit ",(0,r.jsx)(n.code,{children:"spring-boot-starter-data-mongodb"})," lassen wir hier noch\nauskommentiert, da ansonsten die Anwendung ohne zus\xe4tzliche Konfiguration nicht starten w\xfcrde) und konfigurieren\nPrettier. Die vollst\xe4ndige POM sowie das gesamte Projekt k\xf6nnt ihr auf\n",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post1",children:"GitHub"})," finden."]}),"\n",(0,r.jsx)(n.h2,{id:"geplante-paketstruktur",children:"Geplante Paketstruktur"}),"\n",(0,r.jsxs)(n.p,{children:["Wir orientieren uns hier an dem eingangs dargestellten Zwiebelmodell.\nDieses Modell k\xf6nnen wir in unserem Java Code exakt in eine Paketstruktur \xfcbersetzen. Gehen wir davon aus, dass unsere\nAnwendung im Basispaket ",(0,r.jsx)(n.code,{children:"base"})," (f\xfcr unsere konkrete Anwendung ersetze ",(0,r.jsx)(n.code,{children:"base"})," durch ",(0,r.jsx)(n.code,{children:"de.colenet.hexagonal.todo.list"}),")\nliegt, so kann eine Paketstruktur folgenderma\xdfen aussehen:"]}),"\n",(0,r.jsxs)("figure",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:d,alt:"missing",height:500}),(0,r.jsx)("figcaption",{children:"Zwiebelmodell: Pakete"})]}),"\n",(0,r.jsx)(n.p,{children:"Zur Erinnerung: F\xfcr die Schichten der Zwiebel gilt hierbei, dass Zugriffe nur von au\xdfen nach innen gerichtet erlaubt\nsind. Dabei d\xfcrfen aber Schichten \xfcbersprungen werden."}),"\n",(0,r.jsxs)("figure",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:a,alt:"missing",height:500}),(0,r.jsx)("figcaption",{children:"Zwiebelmodell: Aufrufe"})]}),"\n",(0,r.jsxs)(n.p,{children:["Insbesondere ist es verschiedenen Adaptern ",(0,r.jsx)(n.strong,{children:"nicht"})," erlaubt, sich gegenseitig aufzurufen, auch wenn sie in derselben\nSchicht dargestellt sind."]}),"\n",(0,r.jsxs)(n.p,{children:["Genau diese Struktur und Zugriffsrechte wollen wir in unserem Projekt ",(0,r.jsx)(n.em,{children:"automatisiert"})," sicherstellen. Dazu schreiben wir\nim n\xe4chsten Abschnitt einen ",(0,r.jsx)(n.em,{children:"Architektur-Unittest"}),", der, wie alle anderen Unittests, bei jedem CI-Build ausgef\xfchrt wird\nund den Build bei einer Verletzung unserer Regeln fehlschlagen l\xe4sst."]}),"\n",(0,r.jsx)(n.h2,{id:"architektur-unittests",children:"Architektur-Unittests"}),"\n",(0,r.jsxs)(n.p,{children:["Hierzu verwenden wir ",(0,r.jsx)(n.a,{href:"https://www.archunit.org/",children:"ArchUnit"}),", eine Java Bibliothek, die sich selbst beschreibt als:\n",(0,r.jsx)(n.em,{children:"ArchUnit is a free, simple and extensible library for checking the architecture of your Java code using any plain Java\nunit test framework."}),"\nKonkret bedeutet das f\xfcr uns, dass ArchUnit es uns erlaubt, normalen Java-Testcode zu schreiben und diese Tests dann\nmit JUnit auszuf\xfchren. Eine simple Testklasse muss dazu einzig mit ",(0,r.jsx)(n.code,{children:"@AnalyzeClasses"})," annotiert werden. Au\xdferdem m\xfcssen\nTestf\xe4lle mit der Annotation ",(0,r.jsx)(n.code,{children:"@ArchTest"})," gekennzeichnet werden. F\xfcr mehr Details verweise ich gerne auf die\nhervorragende ",(0,r.jsx)(n.a,{href:"https://www.archunit.org/userguide/html/000_Index.html",children:"Dokumentation von ArchUnit"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Unsere Testklasse wird damit folgenderma\xdfen aussehen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@AnalyzeClasses(packages = "base", importOptions = ImportOption.DoNotIncludeTests.class)\nclass HexagonalArchitectureTest {\n\n    @ArchTest\n    static final ArchRule onionArchitectureIsRespected = ... // TODO\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Auff\xe4llig ist hierbei eventuell die Konfiguration ",(0,r.jsx)(n.code,{children:"importOptions = ImportOption.DoNotIncludeTests.class"}),",\ndie Testklassen von unserem Architekturtest ausschlie\xdft. Dazu habe ich mich entschieden, um beim Testen etwas mehr\nFlexibilit\xe4t zu bewahren. Ihr k\xf6nnt diese Option in eurer Anwendung nat\xfcrlich au\xdfen vor lassen, um noch strikter zu\nsein."]}),"\n",(0,r.jsxs)(n.p,{children:["Um unseren Test zu vervollst\xe4ndigen, verwenden wir die von ArchUnit von Haus aus\nbereitgestellte ",(0,r.jsx)(n.a,{href:"https://www.archunit.org/userguide/html/000_Index.html#_architectures",children:"Onion Architecture Regel"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ArchTest\nstatic final ArchRule onionArchitectureIsRespected = Architectures\n        .onionArchitecture()\n        .domainModels("base.domain.model")\n        .domainServices("base.domain.service")\n        .applicationServices("base.application")\n        .adapter("adapter1","base.adapter.adapter1")\n        .adapter("adapter2","base.adapter.adapter2")\n        // ... more adapters\n        .ensureAllClassesAreContainedInArchitectureIgnoring("base");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Wir ignorieren der Einfachheit halber alle Klassen, die direkt in unserem Basispaket liegen, da sich dort aus\ntechnischen Gr\xfcnden unsere mit ",(0,r.jsx)(n.code,{children:"@SpringBootApplication"})," annotierte Einstiegsklasse befindet. In einer Produktivanwendung\nk\xf6nnten wir hier mittels eines ",(0,r.jsx)(n.code,{children:"DescribedPredicate"})," genauer sein und nur diese eine Einstiegsklasse vom\nTest ausschlie\xdfen."]}),"\n",(0,r.jsxs)(n.p,{children:["F\xfcr unseren Fall m\xfcssen wir nun nat\xfcrlich das korrekte Basispaket verwenden und konkrete Adapter definieren.\nHier wollen wir f\xfcr den Moment mit den Adaptern ",(0,r.jsx)(n.code,{children:"cache"})," und ",(0,r.jsx)(n.code,{children:"rest"})," starten. Au\xdferdem setzen wir tempor\xe4r die\nOption ",(0,r.jsx)(n.code,{children:"withOptionalLayers(true)"})," um leere Schichten zu erlauben."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@AnalyzeClasses(packages = HexagonalArchitectureTest.BASE_PACKAGE, importOptions = ImportOption.DoNotIncludeTests.class)\nclass HexagonalArchitectureTest {\n\n    static final String BASE_PACKAGE = "de.colenet.hexagonal.todo.list";\n\n    @ArchTest\n    static final ArchRule onionArchitectureIsRespected = Architectures\n            .onionArchitecture()\n            .domainModels(getPackageIdentifier("domain.model"))\n            .domainServices(getPackageIdentifier("domain.service"))\n            .applicationServices(getPackageIdentifier("application"))\n            .adapter("cache", getAdapterIdentifier("cache"))\n            .adapter("rest", getAdapterIdentifier("rest"))\n            .withOptionalLayers(true) // TODO Remove this as soon as our layers are filled\n            .ensureAllClassesAreContainedInArchitectureIgnoring(BASE_PACKAGE);\n\n    private static String getAdapterIdentifier(String name) {\n        return getPackageIdentifier("adapter." + name);\n    }\n\n    private static String getPackageIdentifier(String subpackage) {\n        return BASE_PACKAGE + "." + subpackage + "..";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ausblick",children:"Ausblick"}),"\n",(0,r.jsx)(n.p,{children:"Im n\xe4chsten Teil dieser Serie f\xfcllen wir unsere Anwendung mit erster Funktionalit\xe4t.\nDazu werden wir einen Service aufsetzen, der es uns erlaubt, Tasks anzulegen, auszulesen und als abgeschlossen zu markieren.\nDie Daten werden wir f\xfcr den Anfang in einem In-Memory Cache halten.\nIn einem sp\xe4teren Beitrag werden wir diesen dann durch eine echte Datenbank ersetzen."})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5099:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/banner-1c15903407b9c74a1996793f8daeec3c.webp"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);