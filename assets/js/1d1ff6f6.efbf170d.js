"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[957],{519:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=i(4848),t=i(8453);const a={slug:"hexagonal-architecture-java-spring-boot-part-5",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 5: Anbindung der Datenbank (am Beispiel einer MongoDB)",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:new Date("2024-04-16T00:00:00.000Z")},s=void 0,o={permalink:"/hexagonal-architecture-java-spring-boot-part-5",source:"@site/blog/hexagonal-architecture/part5/part5.mdx",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 5: Anbindung der Datenbank (am Beispiel einer MongoDB)",description:"banner",date:"2024-04-16T00:00:00.000Z",formattedDate:"16. April 2024",tags:[{label:"Domain-driven Design",permalink:"/tags/domain-driven-design"},{label:"Hexagonale Architektur",permalink:"/tags/hexagonale-architektur"},{label:"Softwarearchitektur",permalink:"/tags/softwarearchitektur"},{label:"Softwareentwicklung",permalink:"/tags/softwareentwicklung"}],readingTime:7.91,hasTruncateMarker:!0,authors:[{name:"Ricardo Schnur",title:"Software Developer @ Colenet GmbH",url:"https://github.com/ricardo-schnur",imageURL:"img/profile.png",key:"ricardo"}],frontMatter:{slug:"hexagonal-architecture-java-spring-boot-part-5",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 5: Anbindung der Datenbank (am Beispiel einer MongoDB)",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:"2024-04-16T00:00:00.000Z"},unlisted:!1,nextItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 4: Folgen einer \xc4nderung am Dom\xe4nenmodell und die Applikationsschicht",permalink:"/hexagonal-architecture-java-spring-boot-part-4"}},d={authorsImageUrls:[void 0]},l=[{value:"Setup der MongoDB",id:"setup-der-mongodb",level:2},{value:"Anbindung der Anwendung an die Datenbank",id:"anbindung-der-anwendung-an-die-datenbank",level:2},{value:"Bedingtes Laden von Komponenten",id:"bedingtes-laden-von-komponenten",level:2},{value:"Implementation des Datenbank-Adapters",id:"implementation-des-datenbank-adapters",level:2},{value:"Die Vorteile hexagonaler Architektur nutzen",id:"die-vorteile-hexagonaler-architektur-nutzen",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{Head:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"banner",src:i(2391).A+"",width:"1031",height:"592"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"In seiner f\xfcnfteiligen Blogreihe erkl\xe4rt Ricardo die Vorteile von hexagonaler Architektur am Beispiel der Entwicklung\neiner To-Do-Listen-Anwendung. Im letzten Teil der Reihe wird das Projekt mit der Anbindung einer MongoDB\nabgeschlossen, was \u2013 dank der gew\xe4hlten Architektur \u2013 mit minimalem Aufwand m\xf6glich wird."}),"\n"]}),"\n","\n",(0,r.jsx)(a,{children:(0,r.jsx)("link",{rel:"canonical",href:"https://www.colenet.de/blog/development/hexagonale-architektur-in-der-praxis-teil-5-anbindung-der-datenbank/"})}),"\n",(0,r.jsxs)(n.p,{children:["Nachdem wir im Laufe dieser Serie eine voll funktionsf\xe4hige ",(0,r.jsx)(n.strong,{children:"To-Do-Listen-Anwendung"})," entwickelt haben (den kompletten\nCode findet ihr auf ",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post5",children:"GitHub"}),"),\nwollen wir uns zum Abschluss noch anschauen, wie die gew\xe4hlte Architektur es uns erm\xf6glicht, ganz ohne \xc4nderungen am\nApplikationskern und mit minimalem Aufwand ",(0,r.jsx)(n.strong,{children:"unseren In-Memory Cache durch eine persistente MongoDB zu ersetzen"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1",children:"Im ersten Teil"})," dieser Serie haben wir\nein ",(0,r.jsx)(n.strong,{children:"frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert"}),". Wir haben uns \xfcberlegt, wie wir uns die *\n",(0,r.jsx)(n.em,{children:"Architektur\nder Anwendung und ihre Umsetzung"}),"* vorstellen und diese Vorstellung mittels ArchUnit in einem ",(0,r.jsx)(n.strong,{children:"automatisierten\nArchitekturtest"})," festgehalten."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2",children:"Im zweiten Teil"})," sind wir mit der\n",(0,r.jsx)(n.strong,{children:"Modellierung der Dom\xe4ne"}),", der ",(0,r.jsx)(n.strong,{children:"Implementierung der Kernlogik"})," und der Datenhaltung der Anwendung in die eigentliche\nEntwicklung gestartet."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3",children:"Im dritten Teil"})," haben wir alle\ngrundlegenden ",(0,r.jsx)(n.strong,{children:"Funktionalit\xe4ten unserer Anwendung implementiert"}),", sodass diese nutzbar wurde."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-4",children:"Im vierten Teil"})," haben wir uns\nangesehen, welche Auswirkungen eine ",(0,r.jsx)(n.strong,{children:"Anpassung am Dom\xe4nenmodell"})," auf die bestehende Anwendung hat. Au\xdferdem wurde die\n",(0,r.jsx)(n.strong,{children:"Applikationsschicht"})," mit einer geplanten Aufgabe zum regelm\xe4\xdfigen Senden von Benachrichtigungen gef\xfcllt sowie mit der\nM\xf6glichkeit, beim Anwendungsstart automatisch einige Beispieltasks zu erzeugen."]}),"\n",(0,r.jsx)(n.p,{children:"Nun geht es also noch darum, den In-Memory-Cache abzul\xf6sen durch eine persistente MongoDB \u2013 was dank unserer Architektur\nmit minimalem Aufwand m\xf6glich wird."}),"\n",(0,r.jsx)(n.h2,{id:"setup-der-mongodb",children:"Setup der MongoDB"}),"\n",(0,r.jsx)(n.p,{children:"Solltet ihr bereits eine MongoDB-Instanz zur Verf\xfcgung haben, k\xf6nnt ihr diesen Schritt nat\xfcrlich \xfcberspringen. Ansonsten\nstellt folgende Docker Compose Datei eine minimal lauff\xe4hige Konfiguration bereit, die f\xfcr unsere Zwecke v\xf6llig\nausreicht:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# See https://hub.docker.com/_/mongo\nservices:\n  mongo:\n    image: "mongo:6.0.7"\n    restart: "unless-stopped"\n    ports:\n      - "27017:27017" # Map the port to make it accessible outside the container\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: "root"\n      MONGO_INITDB_ROOT_PASSWORD: "example" # Use secrets in a production application instead of plaintext passwords!\n'})}),"\n",(0,r.jsx)(n.p,{children:"Ihr ben\xf6tigt hierzu Docker mit installiertem Compose-Plugin und k\xf6nnt die Datenbankinstanz dann mit dem Befehl"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker-compose -f mongodb-compose.yaml up\n"})}),"\n",(0,r.jsxs)(n.p,{children:["aufsetzen. Die Instanz ist dann auf Port ",(0,r.jsx)(n.code,{children:"27017"})," mit den Zugangsdaten ",(0,r.jsx)(n.code,{children:"root / example"})," ansprechbar. Diese Konfiguration\nk\xf6nnt ihr nat\xfcrlich nach Belieben in der obigen Compose Datei anpassen."]}),"\n",(0,r.jsx)(n.p,{children:"Nachdem wir nun eine Datenbank zur Verf\xfcgung haben, wollen wir unsere Anwendung im n\xe4chsten Schritt mit dieser\nverbinden."}),"\n",(0,r.jsx)(n.h2,{id:"anbindung-der-anwendung-an-die-datenbank",children:"Anbindung der Anwendung an die Datenbank"}),"\n",(0,r.jsxs)(n.p,{children:["In einem ersten Schritt hinterlegen wir dazu die Verbindungsdaten in den ",(0,r.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# MongoDB config\nspring.data.mongodb.host=localhost\nspring.data.mongodb.port=27017\nspring.data.mongodb.authentication-database=admin\nspring.data.mongodb.database=test\nspring.data.mongodb.username=root\nspring.data.mongodb.password=example\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In einer produktiven Anwendung sollte das Passwort nat\xfcrlich in einem ",(0,r.jsx)(n.em,{children:"Secret Manager"})," hinterlegt werden,\ndiesen Umweg sparen wir uns aber an dieser Stelle."]}),"\n",(0,r.jsxs)(n.p,{children:["Als N\xe4chstes f\xfcgen wir die Abh\xe4ngigkeit ",(0,r.jsx)(n.em,{children:"spring-boot-starter-data-mongodb"})," zu unserem Projekt in der ",(0,r.jsx)(n.code,{children:"pom.xml"})," hinzu:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Diese kann, ohne weitere Zuarbeit unsererseits, mithilfe der eben hinterlegten Optionen nun eine Verbindung zur\nDatenbank herstellen."}),"\n",(0,r.jsx)(n.p,{children:"Schlie\xdflich fehlt uns noch eine M\xf6glichkeit, zu entscheiden, ob wir wie bisher mit einem Cache oder mit der neuen\nDatenbank arbeiten m\xf6chten. Dazu f\xfchren wir zuerst einen weiteren Konfigurationsparameter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Use 'cache' or 'database'\nstorage.type=cache\n"})}),"\n",(0,r.jsx)(n.p,{children:"ein und m\xfcssen zum Abschluss noch - basierend auf dem gesetzen Wert dieses Parameters - unsere Anwendung\nentweder mit dem schon existierenden Cache-Adapter oder mit einem hypothetischen Datenbank-Adapter laden."}),"\n",(0,r.jsx)(n.h2,{id:"bedingtes-laden-von-komponenten",children:"Bedingtes Laden von Komponenten"}),"\n",(0,r.jsxs)(n.p,{children:["Um dies zu erm\xf6glichen, werden wir nun Teile unserer Anwendung nur noch bedingt beim Anwendungsstart laden.\nHierzu f\xfchren wir mehrere Anpassungen an unserer Einstiegsklasse ",(0,r.jsx)(n.code,{children:"HexagonalToDoListApplication"})," durch."]}),"\n",(0,r.jsxs)(n.p,{children:["Zuerst einmal schlie\xdfen wir sowohl den Cache-Adapter, als auch den noch zu implementierenden Datenbank-Adapter,\nkomplett vom Anwendungsstart aus. Dazu hinterlegen wir folgende ",(0,r.jsx)(n.code,{children:"@ComponentScan"}),"-Konfiguration an der Klasse:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ComponentScan(\n        excludeFilters = {\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = ADAPTER_PACKAGE + ".cache.*"),\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = ADAPTER_PACKAGE + ".mongodb.*"),\n        }\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Hierbei verwenden wir die Konstante ",(0,r.jsx)(n.code,{children:'String ADAPTER_PACKAGE = "de.colenet.hexagonal.todo.list.adapter"'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Um unsere Anwendung wie bisher mit einem Cache starten zu k\xf6nnen, legen wir eine neue, innere,\nmit ",(0,r.jsx)(n.code,{children:"@Configuration"}),"-annotierte Klasse an, die einerseits den eben ausgeschlossenen Cache-Adapter wieder l\xe4dt,\nfalls ",(0,r.jsx)(n.code,{children:'storage.type="cache"'})," gesetzt ist, und andererseits noch die ",(0,r.jsx)(n.em,{children:"AutoConfiguration"})," der eben hinzugef\xfcgten\nAbh\xe4ngigkeit unterdr\xfcckt. Letzteres schlie\xdfen wir an dieser Stelle statt in der Einstiegsklasse aus, da\nansonsten (aufgrund der Art und Weise, wie ",(0,r.jsx)(n.em,{children:"AutoConfiguration"})," in Spring funktioniert) erheblich mehr\nKonfigurationsarbeit von uns zu leisten w\xe4re. Die entstandene Konfiguration sieht folgenderma\xdfen aus:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\n@Configuration\n@ComponentScan(ADAPTER_PACKAGE + ".cache")\n@ConditionalOnProperty(name = "storage.type", havingValue = "cache")\n@EnableAutoConfiguration(\n        exclude = {\n                MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoRepositoriesAutoConfiguration.class,\n        }\n)\nclass CacheConfiguration {}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["F\xfcr die Datenbank gehen wir analog vor, nur dass wir hier keine Anpassung an der ",(0,r.jsx)(n.em,{children:"AutoConfiguration"})," ben\xf6tigen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\n@Configuration\n@ComponentScan(ADAPTER_PACKAGE + ".mongodb")\n@ConditionalOnProperty(name = "storage.type", havingValue = "database")\nclass DatabaseConfiguration {}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Starten wir nun unsere Anwendung mit der Konfiguration ",(0,r.jsx)(n.code,{children:'storage.type="cache"'}),", so verh\xe4lt sich alles wie bisher.\nVersuchen wir hingegen mit ",(0,r.jsx)(n.code,{children:'storage.type="database"'})," zu starten, wird dies derzeit noch nicht funktionieren, da\nkeine Implementierung f\xfcr ",(0,r.jsx)(n.code,{children:"TaskRepository"})," unter den geladenen Komponenten zu finden ist.\nDas beheben wir nat\xfcrlich, indem wir im Folgenden abschlie\xdfend unseren Datenbank-Adapter implementieren."]}),"\n",(0,r.jsx)(n.p,{children:"Bemerkenswert ist an dieser Stelle, dass wir hiermit bereits jegliche Konfigurationsarbeit geleistet haben und\nauch keinerlei weitere \xc4nderungen in unserem Bestandscode notwendig sind; wir werden im Folgenden (abgesehen von\nTests) ausschlie\xdflich in einem neuen Adapter arbeiten. Dieser Umstand demonstriert deutlich einen der gro\xdfen\nVorteile der hexagonalen Architektur: Infrastruktur\xe4nderungen haben nur sehr lokale Auswirkungen. Wir mussten nicht\neine einzige Zeile Code in unserem Applikationskern oder in anderen Adaptern anpassen!"}),"\n",(0,r.jsx)(n.p,{children:"Kommen wir nun also endlich zum letzten Puzzleteil: Dem Datenbank-Adapter."}),"\n",(0,r.jsx)(n.h2,{id:"implementation-des-datenbank-adapters",children:"Implementation des Datenbank-Adapters"}),"\n",(0,r.jsx)(n.p,{children:"Hier passiert \xfcberhaupt nichts Neues mehr. Wir haben in den vorherigen Adaptern alle Techniken kennengelernt und\ngehen hier v\xf6llig analog vor."}),"\n",(0,r.jsx)(n.p,{children:"Zuerst legen wir uns eine geeignete Darstellung unseres Datenmodells f\xfcr den gegebenen Zweck zurecht.\nWie im REST-Adapter auch, greifen wir hier auf eine Darstellung als reinen Produkttyp zur\xfcck, sind aber in unseren\nZeittypen konkreter als dort, da diese hier entsprechend unterst\xfctzt werden:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public record TaskEntity(\n        String id,\n        String description,\n        LocalDate dueDate,\n        boolean completed,\n        LocalDateTime completionTime\n) {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Nat\xfcrlich brauchen wir an dieser Stelle dann auch wieder einen geeigneten ",(0,r.jsx)(n.em,{children:"Mapper"}),", um zwischen dieser Darstellung\nund unserem Dom\xe4nenmodell hin- und herwechseln zu k\xf6nnen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n@Component\npublic class MongoMapper {\n\n    public TaskEntity toEntity(Task model) {\n        return new TaskEntity(\n                model.id().toString(),\n                model.description(),\n                model.dueDate().orElse(null),\n                switch (model) {\n                    case OpenTask __ -> false;\n                    case CompletedTask __ -> true;\n                },\n                switch (model) {\n                    case OpenTask __ -> null;\n                    case CompletedTask t -> t.completionTime();\n                }\n        );\n    }\n\n    public Task toModel(TaskEntity entity) {\n        return entity.completed() ? toCompletedTask(entity) : toOpenTask(entity);\n    }\n\n    private static CompletedTask toCompletedTask(TaskEntity entity) {\n        return new CompletedTask(\n                UUID.fromString(entity.id()),\n                entity.description(),\n                Optional.ofNullable(entity.dueDate()),\n                entity.completionTime()\n        );\n    }\n\n    private static OpenTask toOpenTask(TaskEntity entity) {\n        return new OpenTask(UUID.fromString(entity.id()), entity.description(), Optional.ofNullable(entity.dueDate()));\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Wir haben nun also drei verschiedene Auspr\xe4gungen eines ",(0,r.jsx)(n.em,{children:"Task"}),"s. Einerseits unser rein durch die Fachlichkeit\nmotiviertes Dom\xe4nenmodell ",(0,r.jsx)(n.code,{children:"Task"}),", andererseits zwei zweckgebundene, durch die gew\xe4hlte Infrastruktur beeinflusste,\nAuspr\xe4gungen ",(0,r.jsx)(n.code,{children:"TaskDto"})," und ",(0,r.jsx)(n.code,{children:"TaskEntity"}),". Diese k\xf6nnen wir nach Bedarf v\xf6llig unabh\xe4ngig voneinander evolvieren\n(durch geeignete Anpassung an den entsprechenden ",(0,r.jsx)(n.em,{children:"Mappern"}),") und sind so etwa gerade dazu in der Lage, unsere\nPersistenzinfrastruktur grundlegend zu ver\xe4ndern, ohne die \xf6ffentliche API der Anwendung zu ver\xe4ndern."]}),"\n",(0,r.jsxs)(n.p,{children:["Als letzter Schritt bleibt jetzt also nur die Implementierung von ",(0,r.jsx)(n.code,{children:"TaskRepository"}),". Hierzu legen wir erst ein Spring\nData Repository"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n@Repository\npublic interface BaseMongoTaskRepository extends MongoRepository<TaskEntity, String> {\n    List<TaskEntity> findByDueDateIsBeforeOrDueDateEquals(LocalDate beforeDate, LocalDate equalsDate);\n\n    default List<TaskEntity> findByDueDateIsBeforeOrDueDateEquals(LocalDate date) {\n        return findByDueDateIsBeforeOrDueDateEquals(date, date);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["an, welches die eigentliche Arbeit verrichten wird. In unserer Implementierung von ",(0,r.jsx)(n.code,{children:"TaskRepository"})," werden wir jetzt\nnur noch Aufrufe dieses Repositories, sowie des zuvor angelegten Mappers, auf geeignete Art und Weise zusammenf\xfcgen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n@Repository\nclass MongoTaskRepository implements TaskRepository {\n\n    private final BaseMongoTaskRepository baseMongoTaskRepository;\n    private final MongoMapper mongoMapper;\n\n    MongoTaskRepository(BaseMongoTaskRepository baseMongoTaskRepository, MongoMapper mongoMapper) {\n        this.baseMongoTaskRepository = baseMongoTaskRepository;\n        this.mongoMapper = mongoMapper;\n    }\n\n    @Override\n    public Task save(Task task) {\n        return Function1\n                .of(mongoMapper::toEntity)\n                .andThen(baseMongoTaskRepository::save)\n                .andThen(mongoMapper::toModel)\n                .apply(task);\n    }\n\n    @Override\n    public Optional<Task> find(UUID id) {\n        return baseMongoTaskRepository.findById(id.toString()).map(mongoMapper::toModel);\n    }\n\n    @Override\n    public List<Task> getAll() {\n        return baseMongoTaskRepository.findAll().stream().map(mongoMapper::toModel).toList();\n    }\n\n    @Override\n    public List<OpenTask> getAllOpenTasksWithDueDateBeforeOrEqual(LocalDate date) {\n        return baseMongoTaskRepository\n                .findByDueDateIsBeforeOrDueDateEquals(date)\n                .stream()\n                .map(mongoMapper::toModel)\n                // Should probably be filtered in the database call in production applications!\n                .filter(OpenTask.class::isInstance)\n                .map(OpenTask.class::cast)\n                .toList();\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Damit haben wir unsere Implementierung endlich abgeschlossen und k\xf6nnen unsere Anwendung schlie\xdflich mit der\nKonfiguration ",(0,r.jsx)(n.code,{children:'storage.type="database"'})," starten und unsere Tasks persistent in der anfangs angelegten Datenbank\nspeichern."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Randbemerkung: Testing",type:"note",children:[(0,r.jsx)(n.p,{children:"Um sicherzustellen, dass unser neuer Datenbank-Adapter nichts am Verhalten der Anwendung \xe4ndert, habe ich die bereits\nexistierenden Integrations- und End-To-End-Tests so abstrahiert, dass sie sowohl gegen den Cache- als auch gegen den\nDatenbank-Adapter gefahren werden k\xf6nnen. Das liefert uns zumindest eine gewisse Konfidenz, dass sich die beiden\nPersistenz-Modi in ihrem Verhalten nach au\xdfen nicht unterscheiden."}),(0,r.jsxs)(n.p,{children:["Auch wenn Testing nicht im Fokus dieser Reihe lag,\nlade ich euch dazu ein, euch die Details hierzu\nim ",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post5",children:"Repository"})," anzuschauen."]})]}),"\n",(0,r.jsx)(n.h2,{id:"die-vorteile-hexagonaler-architektur-nutzen",children:"Die Vorteile hexagonaler Architektur nutzen"}),"\n",(0,r.jsxs)(n.p,{children:["Hiermit sind wir am Ende unserer Reise angelangt. Zu Beginn des ersten Teils habe ich der hexagonalen Architektur\nVorteile wie etwa ein ",(0,r.jsx)(n.strong,{children:"dom\xe4nenzentriertes Design"}),", ",(0,r.jsx)(n.strong,{children:"Flexibilit\xe4t"})," und eine ",(0,r.jsx)(n.strong,{children:"klare Projektstruktur"})," zugeschrieben.\nIn diesem\nTeil konnten wir au\xdferdem sehen, ",(0,r.jsxs)(n.strong,{children:["dass das Infrastrukturthema ",(0,r.jsx)(n.em,{children:"Cache oder Datenbank"})," zur Datenhaltung keine einzige\nZeile\nan Code\xe4nderungen in der Dom\xe4nenschicht erforderte"]}),". H\xe4tten wir unsere Anforderung leicht abge\xe4ndert zu ",(0,r.jsx)(n.em,{children:"Cache durch\nDatenbank ersetzen"}),", w\xe4ren noch nicht einmal die \xc4nderungen zum bedingten Laden von Komponenten notwendig gewesen\nund wir\nh\xe4tten einzig den Cacheadapter durch einen Datenbankadapter ersetzen m\xfcssen."]}),"\n",(0,r.jsxs)(n.p,{children:["Ihr habt in dieser Reihe einen von vielen m\xf6glichen Wegen gesehen, wie sich eine ",(0,r.jsx)(n.strong,{children:"hexagonale Architektur in Java mit\nSpring"})," umsetzen l\xe4sst. Die gelernte Vorgehensweise l\xe4sst sich aber nat\xfcrlich konzeptuell auch auf andere Sprachen und\nFrameworks \u2013 mit entsprechenden technischen Anpassungen \u2013 \xfcbertragen."]}),"\n",(0,r.jsx)(n.p,{children:"Probiert es in eurem n\xe4chsten Projekt doch mal aus!"})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2391:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/banner-44dc1d30b8a1b9335d5b0d5a251323ee.webp"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var r=i(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);