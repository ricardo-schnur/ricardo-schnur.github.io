"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[423],{7859:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=i(4848),t=i(8453);const a={slug:"hexagonal-architecture-java-spring-boot-part-4",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 4: Folgen einer \xc4nderung am Dom\xe4nenmodell und die Applikationsschicht",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:new Date("2024-02-27T00:00:00.000Z")},s=void 0,l={permalink:"/hexagonal-architecture-java-spring-boot-part-4",source:"@site/blog/hexagonal-architecture/part4/part4.mdx",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 4: Folgen einer \xc4nderung am Dom\xe4nenmodell und die Applikationsschicht",description:"banner",date:"2024-02-27T00:00:00.000Z",formattedDate:"27. Februar 2024",tags:[{label:"Domain-driven Design",permalink:"/tags/domain-driven-design"},{label:"Hexagonale Architektur",permalink:"/tags/hexagonale-architektur"},{label:"Softwarearchitektur",permalink:"/tags/softwarearchitektur"},{label:"Softwareentwicklung",permalink:"/tags/softwareentwicklung"}],readingTime:10.145,hasTruncateMarker:!0,authors:[{name:"Ricardo Schnur",title:"Software Developer @ Colenet GmbH",url:"https://github.com/ricardo-schnur",imageURL:"img/profile.png",key:"ricardo"}],frontMatter:{slug:"hexagonal-architecture-java-spring-boot-part-4",title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 4: Folgen einer \xc4nderung am Dom\xe4nenmodell und die Applikationsschicht",authors:"ricardo",tags:["Domain-driven Design","Hexagonale Architektur","Softwarearchitektur","Softwareentwicklung"],date:"2024-02-27T00:00:00.000Z"},unlisted:!1,prevItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring-Boot-Projekt \u2013 Teil 5: Anbindung der Datenbank (am Beispiel einer MongoDB)",permalink:"/hexagonal-architecture-java-spring-boot-part-5"},nextItem:{title:"Hexagonale Architektur in der Praxis: Umsetzung in einem Java/Spring Boot Projekt \u2013 Teil 3: REST-Schnittstelle mit Antikorruptionsschicht",permalink:"/hexagonal-architecture-java-spring-boot-part-3"}},d={authorsImageUrls:[void 0]},c=[{value:"Erweiterung des Dom\xe4nenmodells",id:"erweiterung-des-dom\xe4nenmodells",level:2},{value:"Die Applikationsschicht: Automatische F\xe4lligkeitsbenachrichtigungen",id:"die-applikationsschicht-automatische-f\xe4lligkeitsbenachrichtigungen",level:2},{value:"Erzeugung von Beispieltasks",id:"erzeugung-von-beispieltasks",level:2},{value:"Ausblick",id:"ausblick",level:2}];function o(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{Head:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"banner",src:i(3286).A+"",width:"1031",height:"592"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Ricardo zeigt uns in dieser Blog-Reihe die Vorteile von hexagonaler Architektur anhand der Entwicklung einer\nTo-Do-Listen-Anwendung. Im 4. Teil wird das Dom\xe4nenmodell erweitert und die Applikationsschicht mit einer\ngeplanten Aufgabe gef\xfcllt."}),"\n"]}),"\n","\n",(0,r.jsx)(a,{children:(0,r.jsx)("link",{rel:"canonical",href:"https://www.colenet.de/blog/development/hexagonale-architektur-in-der-praxis-teil-4-aenderung-am-domanenmodell-und-applikationsschicht/"})}),"\n",(0,r.jsxs)(n.p,{children:["Diese Artikel-Reihe ist der hexagonalen Architektur gewidmet: Wir m\xf6chten ihre Grundprinzipien verstehen und diese in\nder Praxis erleben. Wir werden uns anschauen, wie sich eine hexagonale Architektur in einer typischen Webanwendung\npraktisch realisieren l\xe4sst. Dazu werden wir Schritt f\xfcr Schritt eine kleine ",(0,r.jsx)(n.strong,{children:"To-do-Listen-Anwendung"})," entwickeln, die\nes\nerm\xf6glichen soll, Tasks anzulegen, angelegte Tasks anzuzeigen und Tasks als erledigt zu markieren. Die Anwendung wird\n\xfcber eine REST-Schnittstelle bedienbar sein und die Tasks werden konfigurierbar entweder In-Memory oder persistent in\neiner echten MongoDB verwaltet."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-1",children:"Im ersten Teil"})," dieser Serie haben wir\nein frisches Java/Spring-Boot-Projekt aufgesetzt und konfiguriert. Wir haben uns\n\xfcberlegt, wie wir uns die Architektur der Anwendung und ihre Umsetzung vorstellen und diese Vorstellung mittels ArchUnit\nin einem automatisierten Architekturtest festgehalten."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-2",children:"Im zweiten Teil"})," sind wir mit der\nModellierung der Dom\xe4ne, der Implementierung der Kernlogik und der Datenhaltung der\nAnwendung in die eigentliche Entwicklung gestartet."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ricardo-schnur.github.io/hexagonal-architecture-java-spring-boot-part-3",children:"Im dritten Teil"})," haben wir alle\ngrundlegenden Funktionalit\xe4ten unserer Anwendung implementiert, sodass diese bereits\nnutzbar ist."]}),"\n",(0,r.jsxs)(n.p,{children:["Nun m\xf6chten wir uns einerseits anschauen, welche Auswirkungen eine ",(0,r.jsx)(n.strong,{children:"Anpassung am Dom\xe4nenmodell"})," auf die bestehende\nAnwendung hat und au\xdferdem die bis dato noch unbeachtete ",(0,r.jsx)(n.strong,{children:"Applikationsschicht"})," mit einer geplanten Aufgabe zum\nregelm\xe4\xdfigen Senden von Benachrichtigungen f\xfcllen sowie der M\xf6glichkeit, beim Anwendungsstart automatisch einige\nBeispieltasks zu erzeugen."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Ihr findet den aktuellen Stand des Projekts sowie die \xc4nderungen auch aus diesem Teil\nauf ",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post4",children:"GitHub"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"erweiterung-des-dom\xe4nenmodells",children:"Erweiterung des Dom\xe4nenmodells"}),"\n",(0,r.jsxs)(n.p,{children:["Unsere Anforderung soll recht simpel gehalten werden. Wir wollen unserem Task eine neue Eigenschaft\n",(0,r.jsx)(n.em,{children:"F\xe4lligkeitsdatum"})," hinzuf\xfcgen. Hierbei soll es sich um eine optionale Eigenschaft handeln und sie soll sowohl bei\noffenen als auch (zur Nachvollziehbarkeit) bei geschlossenen Tasks vorhanden sein."]}),"\n",(0,r.jsx)(n.p,{children:"In einem ersten Schritt wollen wir nur diese neue Eigenschaft hinzuf\xfcgen und uns anschauen, an welchen Stellen\nunserer Anwendung wir dazu alles Anpassungen vornehmen m\xfcssen. Im Anschluss daran werden wir unsere Anwendung dann um\nautomatische F\xe4lligkeitsbenachrichtigungen erweitern."}),"\n",(0,r.jsxs)(n.p,{children:["Die Erweiterung unseres Modells gestaltet sich denkbar einfach - wir f\xfcgen lediglich die neue Eigenschaft in den\nbeiden ",(0,r.jsx)(n.code,{children:"record"}),"s ",(0,r.jsx)(n.code,{children:"OpenTask"})," und ",(0,r.jsx)(n.code,{children:"CompletedTask"})," hinzu. Au\xdferdem nehmen wir sie in das Interface ",(0,r.jsx)(n.code,{children:"Task"})," mit auf:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public sealed interface Task {\n    UUID id();\n    String description();\n    Optional<LocalDate> dueDate();\n\n    record OpenTask(UUID id, String description, Optional<LocalDate> dueDate) implements Task {}\n\n    record CompletedTask(UUID id, String description, Optional<LocalDate> dueDate, LocalDateTime completionTime)\n            implements Task {}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Jetzt k\xf6nnen wir uns vom Typsystem und dem Compiler leiten lassen. Als Erstes f\xe4llt uns direkt auf, dass den\nKonstruktoraufrufen in ",(0,r.jsx)(n.code,{children:"TaskService"})," nun einen Parameter fehlt. Dies beheben wir, indem wir einerseits in\n",(0,r.jsx)(n.code,{children:"withToggledCompletionState"})," den jeweils neuen Parameter mit \xfcbergeben"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"private Task withToggledCompletionState(Task task) {\n    return switch (task) {\n        case OpenTask t -> new CompletedTask(t.id(), t.description(), t.dueDate(), LocalDateTime.now(clock));\n        case CompletedTask t -> new OpenTask(t.id(), t.description(), t.dueDate());\n    };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["und andererseits in ",(0,r.jsx)(n.code,{children:"createTask"})," die Methodensignatur um einen entsprechenden Parameter erweitern und diesen\nweiterreichen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public Task createTask(String description, Optional<LocalDate> dueDate) {\n    return taskRepository.save(new OpenTask(UUID.randomUUID(), description, dueDate));\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Durch diese Signatur\xe4nderung wird nun nat\xfcrlich der Aufruf dieser Methode aus ",(0,r.jsx)(n.code,{children:"RestApiController"})," heraus ung\xfcltig."]}),"\n",(0,r.jsx)(n.p,{children:"Um das zu beheben, m\xfcssen wir uns ein wenig mehr anstrengen. Wir erweitern auch hier wieder\ndie Signatur, um den neuen Parameter auch im REST-Aufruf mitgeben zu k\xf6nnen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ResponseEntity<?> createTask(@RequestParam String description, @RequestParam @Nullable String dueDate)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Auff\xe4llig ist hier der Typ ",(0,r.jsx)(n.code,{children:"@Nullable String"}),". Diesen w\xe4hlen wir, damit unser Endpunkt auch weiterhin ohne\ndiesen Parameter aufrufbar ist und wir Serialisierbarkeit gew\xe4hrleisten. Im Gegensatz dazu haben wir uns im\nDom\xe4nenmodell f\xfcr den Typ ",(0,r.jsx)(n.code,{children:"Optional<LocalDate>"})," entschieden, der einerseits mit ",(0,r.jsx)(n.code,{children:"LocalDate"})," spezifischer als\n",(0,r.jsx)(n.code,{children:"String"})," ist und andererseits die Optionalit\xe4t der Eigenschaft durch ",(0,r.jsx)(n.code,{children:"Optional"})," explizit macht und dadurch Benutzer\ndazu zwingt, damit umzugehen. Als N\xe4chstes erweitern wir unseren ",(0,r.jsx)(n.code,{children:"RestApiValidator"}),". Hier wollen wir die bestehende\nMethode"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Validation<String, String> validateDescription(String description)\n"})}),"\n",(0,r.jsx)(n.p,{children:"abl\xf6sen durch:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Validation<Seq<String>, Tuple2<String, Optional<LocalDate>>> validateCreateTaskParameters(\n        String description,\n        String dueDate\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Diese soll uns also im Erfolgsfall ein Tupel bestehend aus der, wie bisher validierten ",(0,r.jsx)(n.code,{children:"description"}),", aber erweitert\num ein validiertes und in den erwarteten Typ umgewandeltes ",(0,r.jsx)(n.code,{children:"dueDate"})," zur\xfcckgeben. Im Fehlerfall wollen wir\nau\xdferdem ",(0,r.jsx)(n.code,{children:"Seq<String>"})," statt nur ",(0,r.jsx)(n.code,{children:"String"})," zur\xfcckgeben, um gegebenenfalls f\xfcr beide Validierungen eine\nFehlernachricht bereitstellen zu k\xf6nnen. Bei ",(0,r.jsx)(n.code,{children:"Seq"})," (f\xfcr ",(0,r.jsx)(n.em,{children:"Sequence"}),") handelt es sich hierbei um einen von Vavr\nbereitgestellten Typ."]}),"\n",(0,r.jsxs)(n.p,{children:["Hierzu bauen wir uns erst eine dedizierte Validierungsfunktion f\xfcr das ",(0,r.jsx)(n.code,{children:"dueDate"}),",\ndie uns entweder ein leeres ",(0,r.jsx)(n.code,{children:"Optional"})," oder aber das geparste Datum liefert:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'private static Validation<String, Optional<LocalDate>> validateDueDate(String dueDate) {\n    if (!StringUtils.hasText(dueDate)) {\n        return Validation.valid(Optional.empty());\n    }\n\n    return Try\n            .success(dueDate)\n            .mapTry(LocalDate::parse)\n            .map(Optional::of)\n            .toValidation(__ -> "Due date has to be in format yyyy-MM-dd: " + dueDate);\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Diese Methode kombinieren wir dann mit ",(0,r.jsx)(n.code,{children:"validateDescription"})," zu:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public Validation<Seq<String>, Tuple2<String, Optional<LocalDate>>> validateCreateTaskParameters(\n        String description,\n        String dueDate\n) {\n    return Validation.combine(validateDescription(description), validateDueDate(dueDate)).ap(Tuple::of);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Schlie\xdflich passen wir noch den Aufruf in ",(0,r.jsx)(n.code,{children:"RestApiController::createTask"})," an, indem wir die bestehende Implementierung"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"return restApiValidator\n    .validateDescription(description)\n    .map(taskService::createTask)\n    .map(restApiMapper::toDto)\n    .fold(RestApiController::createBadRequestResponse, RestApiController::createOkResponse);\n"})}),"\n",(0,r.jsx)(n.p,{children:"ersetzen durch:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'return restApiValidator\n    .validateCreateTaskParameters(description, dueDate)\n    .map(Function2.of(taskService::createTask).tupled())\n    .map(restApiMapper::toDto)\n    .mapError(messages -> String.join("; ", messages))\n    .fold(RestApiController::createBadRequestResponse, RestApiController::createOkResponse);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Wir validieren also nun beide Parameter und reichen diese dann an den Service weiter. Im Fehlerfall konkatenieren\nwir au\xdferdem alle Nachrichten zu einer einzigen Nachricht, die wir dann in die Response aufnehmen."}),"\n",(0,r.jsxs)(n.p,{children:["Sofern wir auch unsere Testklassen entsprechend angepasst haben, ist unsere Anwendung nun wieder kompilierbar und\nnutzbar. Auch ist es uns jetzt m\xf6glich, Tasks mit einem F\xe4lligkeitsdatum via REST-Aufruf anzulegen. Auff\xe4llig ist aber,\ndass alle Antworten unserer Endpunkte ",(0,r.jsx)(n.em,{children:"kein"})," F\xe4lligkeitsdatum mitliefern."]}),"\n",(0,r.jsxs)(n.p,{children:["In erster Linie gilt hier aber v\xf6llig unironisch das Motto ",(0,r.jsx)(n.em,{children:"It's not a bug, it's a feature."})," Dieser Umstand zeigt\nn\xe4mlich, dass wir ",(0,r.jsx)(n.em,{children:"nicht"})," aus Versehen implizit unsere Schnittstelle ver\xe4ndert haben, sondern dies durch die\nEntkopplung von ",(0,r.jsx)(n.code,{children:"Task"})," zu ",(0,r.jsx)(n.code,{children:"TaskDto"})," eine bewusste Entscheidung sein muss. Da wir besagte \xc4nderung an dieser Stelle\naber nat\xfcrlich guthei\xdfen, f\xfcgen wir die neue Eigenschaft in einem letzten Schritt noch zu unserem Austauschmodell hinzu"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public record TaskDto(String id, String description, String dueDate, String state, String completionTime) {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["und erweitern die Methode ",(0,r.jsx)(n.code,{children:"RestApiMapper::toDto"})," um eine entsprechende Zeile:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"model.dueDate().map(LocalDate::toString).orElse(null)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Damit enthalten schlie\xdflich auch alle Antworten unserer Endpunkte die neue Eigenschaft. Im folgenden Abschnitt\nwollen wir das neu hinzugef\xfcgte F\xe4lligkeitsdatum nutzen, um automatisiert F\xe4lligkeitsbenachrichtigungen zu versenden."}),"\n",(0,r.jsx)(n.h2,{id:"die-applikationsschicht-automatische-f\xe4lligkeitsbenachrichtigungen",children:"Die Applikationsschicht: Automatische F\xe4lligkeitsbenachrichtigungen"}),"\n",(0,r.jsxs)(n.p,{children:["Auch hier wollen wir die Anforderungen zu Demonstrationszwecken m\xf6glichst simpel halten: Wir wollen in regelm\xe4\xdfigen\nAbst\xe4nden all unsere offenen Tasks anschauen, pr\xfcfen, ob das F\xe4lligkeitsdatum \xfcberschritten ist, und in diesem Fall\neine Benachrichtigung senden. Dazu implementieren wir eine geplante Aufgabe mittels der von Spring\nbereitgestellten ",(0,r.jsx)(n.code,{children:"@Scheduled"})," Annotation und lassen diese in einem fixen Intervall laufen."]}),"\n",(0,r.jsx)(n.p,{children:"Solche geplanten Aufgaben sind ein typisches Beispiel f\xfcr Code, den wir in der Applikationsschicht unterbringen.\nDenn weder handelt es sich hierbei um Kernlogik, sodass die Dom\xe4ne der falsche Ort daf\xfcr ist, noch haben wir hier\neine Anbindung an die Au\xdfenwelt, was f\xfcr einen Adapter sprechen w\xfcrde. Andere typische Themen, die in der\nApplikationsschicht ihren Platz finden, sind etwa Transaktionsmanagement, die Zusammenf\xfchrung mehrerer\nTeile der Kernlogik zu einem Workflow oder einmalige Aufgaben, die beim Anwendungsstart erledigt werden m\xfcssen\n(hierf\xfcr sehen wir sp\xe4ter noch ein Beispiel)."}),"\n",(0,r.jsx)(n.p,{children:"Wir starten also mit einer neuen Klasse"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package de.colenet.hexagonal.todo.list.application.scheduler;\n\n@Component\nclass DueNotificationScheduler {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"in der wir eine Methode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Scheduled(fixedRateString = "${notification.interval}", timeUnit = TimeUnit.SECONDS)\nvoid sendDueNotifications()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["implementieren m\xf6chten. Das Benachrichtigungsintervall wollen wir hierbei\nkonfigurierbar halten und legen daf\xfcr den Parameter ",(0,r.jsx)(n.code,{children:"notification.interval"})," in den ",(0,r.jsx)(n.code,{children:"application.properties"})," an und\nbelegen diesen dort mit einem geeigneten Wert, etwa ",(0,r.jsx)(n.code,{children:"notification.interval=60"})," f\xfcr eine min\xfctliche Benachrichtigung."]}),"\n",(0,r.jsxs)(n.p,{children:["Au\xdferdem m\xfcssen wir den Scheduling-Mechanismus von Spring \xfcberhaupt erst aktivieren, indem wir unsere\nEinstiegsklasse mit ",(0,r.jsx)(n.code,{children:"@EnableScheduling"})," annotieren:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\n@EnableScheduling\nclass HexagonalToDoListApplication\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Damit haben wir die Grundlagen geschaffen und k\xf6nnen uns jetzt dem Inhalt der Methode ",(0,r.jsx)(n.code,{children:"sendDueNotifications"})," widmen.\nDiese soll erst alle f\xe4lligen, offenen Tasks laden und dann f\xfcr jede davon eine Benachrichtigung senden."]}),"\n",(0,r.jsxs)(n.p,{children:["Zum Laden der Tasks erweitern wir unseren ",(0,r.jsx)(n.code,{children:"TaskService"})," um eine Methode"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"List<OpenTask> getAllOpenTasksWithDueDateBeforeOrEqual(LocalDate date)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Diese soll, wie der Name sagt, alle offenen Tasks zur\xfcckgeben, die ein F\xe4lligkeitsdatum vor oder gleich dem\nangegebenen Datum haben. Auf die genaue Umsetzung wollen wir an dieser Stelle nicht genau eingehen (wir w\xfcrden dabei\nnichts Neues sehen). Die Grundidee ist aber nat\xfcrlich, auch eine entsprechende Methode im Repository anzubieten und\ndiese basierend auf unserem Cache umzusetzen. Die Details dazu k\xf6nnt ihr euch gerne\nim",(0,r.jsx)(n.a,{href:"https://github.com/ricardo-schnur/blog-post-hexagonal-architecture/tree/post4",children:"GitHub Repository"})," anschauen."]}),"\n",(0,r.jsx)(n.p,{children:"Das Senden der Benachrichtigungen wollen wir dann wiederrum in entsprechende Adapter auslagern. Dazu definieren wir\nuns wie gehabt einen Port"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package de.colenet.hexagonal.todo.list.application.scheduler;\n\nimport de.colenet.hexagonal.todo.list.domain.model.task.Task.OpenTask;\n\npublic interface DueNotificationSender {\n    void sendDueNotification(OpenTask task);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"den wir dann sp\xe4ter durch einen konkreten Adapter realisieren."}),"\n",(0,r.jsx)(n.p,{children:"Erst einmal sind wir jetzt aber in der Lage, den Scheduler zu vervollst\xe4ndigen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\nclass DueNotificationScheduler {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DueNotificationScheduler.class);\n\n    private final Clock clock;\n    private final DueNotificationSender dueNotificationSender;\n    private final TaskService taskService;\n\n    DueNotificationScheduler(Clock clock, DueNotificationSender dueNotificationSender, TaskService taskService) {\n        this.clock = clock;\n        this.dueNotificationSender = dueNotificationSender;\n        this.taskService = taskService;\n    }\n\n    @Scheduled(fixedRateString = "${notification.interval}", timeUnit = TimeUnit.SECONDS)\n    void sendDueNotifications() {\n        LOGGER.info("Sending due notifications");\n\n        taskService\n            .getAllOpenTasksWithDueDateBeforeOrEqual(LocalDate.now(clock))\n            .forEach(dueNotificationSender::sendDueNotification);\n\n        LOGGER.info("Finished sending due notifications");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Um auf den ersten Blick sehen zu k\xf6nnen, wann unsere Aufgabe ausgef\xfchrt wird, haben wir hier au\xdferdem noch ein paar\nLogeintr\xe4ge hinzugef\xfcgt."}),"\n",(0,r.jsx)(n.p,{children:"Es fehlt uns jetzt also nur noch ein konkreter Adapter, der den eben definierten Port realisiert. Hierf\xfcr haben wir uns\nalle M\xf6glichkeiten offen gelassen: Wir k\xf6nnten eine E-Mail versenden, unseren favorisierten Chat-Client wie etwa Slack\nverwenden, Push-Benachrichtigungen auf Mobilger\xe4ten erzeugen oder was auch immer wir sonst m\xf6chten."}),"\n",(0,r.jsx)(n.p,{children:"Hier w\xe4hlen wir aber die denkbar einfachste Variante und wollen als \u201eBenachrichtigung\u201d einfach den f\xe4lligen Task loggen.\nDazu registrieren wir zuerst in unserem Architekturtest einen neuen Adapter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'.adapter("console", getAdapterIdentifier("console"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"Au\xdferdem vervollst\xe4ndigen wir an dieser Stelle noch ein offenes To-do und entfernen folgende Zeile"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:".withOptionalLayers(true) // TODO Remove this as soon as our layers are filled\n"})}),"\n",(0,r.jsxs)(n.p,{children:["denn all unsere Schichten sind inzwischen mit Inhalt gef\xfcllt (mal abgesehen von dem gerade registrierten\n",(0,r.jsx)(n.code,{children:"console"}),"-Adapter, aber dazu kommen wir nun)."]}),"\n",(0,r.jsx)(n.p,{children:"Wie bereits erw\xe4hnt wollen wir in diesem neuen Adapter einfach einen Logeintrag als Benachrichtigung erzeugen. Dazu\nist folgende Implementierung v\xf6llig ausreichend:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package de.colenet.hexagonal.todo.list.adapter.console;\n\nimport ...; // Omitted for clarity\n\n@Component\nclass DueNotificationLogger implements DueNotificationSender {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DueNotificationLogger.class);\n\n    public void sendDueNotification(OpenTask task) {\n        LOGGER.warn("Task is due: {}", task);\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Starten wir nun unsere Anwendung und legen uns einen offenen Task mit F\xe4lligkeitsdatum in der Vergangenheit an\n(etwa via ",(0,r.jsx)(n.code,{children:"POST http://localhost:8080/tasks?description=Due&dueDate=2023-07-01"}),"), so sehen wir innerhalb k\xfcrzester\nZeit (nat\xfcrlich abh\xe4ngig vom Parameter ",(0,r.jsx)(n.code,{children:"notification.interval"}),") folgende Logeintr\xe4ge (zur \xdcbersichtlichkeit aufs\nWesentliche reduziert):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"INFO: Sending due notifications\nWARN: Task is due: OpenTask[id=5d3fcb2d-b8c9-47d2-9ba9-c95e7be05b65, description=Due, dueDate=Optional[2023-07-01]]\nINFO: Finished sending due notifications\n"})}),"\n",(0,r.jsx)(n.p,{children:"Abschlie\xdfend wollen wir noch aus Bequemlichkeit zum Anwendungsstart automatisch einige Beispieltasks anlegen, um\nunsere neuen Benachrichtigungen sofort beobachten zu k\xf6nnen, ohne manuell f\xe4llige Tasks anlegen zu m\xfcssen."}),"\n",(0,r.jsx)(n.h2,{id:"erzeugung-von-beispieltasks",children:"Erzeugung von Beispieltasks"}),"\n",(0,r.jsxs)(n.p,{children:["Wie erw\xe4hnt handelt es sich auch hierbei um eine Aufgabe, die sich typischerweise in der Applikationsschicht ansiedelt.\nHierzu bauen wir uns lediglich eine neue Klasse ",(0,r.jsx)(n.code,{children:"ExampleTaskCreator"})," in\n",(0,r.jsx)(n.code,{children:"de.colenet.hexagonal.todo.list.application.startup"}),", die eine Handvoll ",(0,r.jsx)(n.code,{children:"Task"}),"-Objekte erzeugt und diese dann mittels\n",(0,r.jsx)(n.code,{children:"TaskRepository::save"})," abspeichert. Au\xdferdem wollen wir dieses Verhalten dynamisch ein- und ausschaltbar machen und\nlegen uns dazu eine neue Eigenschaft ",(0,r.jsx)(n.code,{children:"startup.exampletasks.create"})," in den ",(0,r.jsx)(n.code,{children:"application.properties"})," an, die wir mit\n",(0,r.jsx)(n.code,{children:"true"})," vorkonfigurieren. Da wir diesen Prozess einmalig nach dem Anwendungsstart ausf\xfchren wollen, kennzeichnen wir\ndie entsprechende Methode au\xdferdem mit ",(0,r.jsx)(n.code,{children:"@EventListener(ApplicationReadyEvent.class)"}),". Alles in allem landen wir bei\nfolgender Implementierung:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\n@ConditionalOnProperty(prefix = "startup", name = "exampletasks.create", havingValue = "true")\nclass ExampleTaskCreator {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExampleTaskCreator.class);\n\n    private final TaskRepository taskRepository;\n\n    ExampleTaskCreator(TaskRepository taskRepository) {\n        this.taskRepository = taskRepository;\n    }\n\n    @EventListener(ApplicationReadyEvent.class)\n    public void createExampleTasks() {\n        LOGGER.info("Creating some example tasks");\n\n        Stream\n            .of(\n                new CompletedTask(\n                    UUID.randomUUID(),\n                    "[EXAMPLE] This task was completed yesterday",\n                    Optional.empty(),\n                    LocalDateTime.now().minusDays(1L)\n                ),\n                // ... more example tasks\n            )\n            .forEach(taskRepository::save);\n\n        LOGGER.info("Example tasks successfully created");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ausblick",children:"Ausblick"}),"\n",(0,r.jsx)(n.p,{children:"Damit sind wir fast am Ende der Reihe angelangt. Unsere Applikation beinhaltet nun jegliche beabsichtigte Funktionalit\xe4t\nund wir haben alle Schichten der hexagonalen Architektur in Verwendung gesehen."}),"\n",(0,r.jsx)(n.p,{children:"In n\xe4chsten und gleichzeitig letzten Teil der Reihe wollen wir uns schlie\xdflich noch anschauen, wie wir unseren In-Memory\nCache durch eine echte, persistente Datenbank ersetzen k\xf6nnen. Dazu werden wir exemplarisch eine MongoDB verwenden.\nKonzeptuell l\xe4sst sich die Vorgehensweise aber nat\xfcrlich auch auf andere Datenbanken \xfcbertragen."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},3286:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/banner-f45034d23a133067a27eca2af8ac1a1f.webp"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);